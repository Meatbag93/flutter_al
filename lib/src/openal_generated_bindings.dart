// ignore_for_file: always_specify_types, unused_element, unused_field
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to OpenAL
class OpenALBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpenALBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpenALBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void alEnable(
    int capability,
  ) {
    return _alEnable(
      capability,
    );
  }

  late final _alEnablePtr =
      _lookup<ffi.NativeFunction<NativeAlEnable>>('alEnable');
  late final _alEnable = _alEnablePtr.asFunction<DartAlEnable>(isLeaf: true);

  void alDisable(
    int capability,
  ) {
    return _alDisable(
      capability,
    );
  }

  late final _alDisablePtr =
      _lookup<ffi.NativeFunction<NativeAlDisable>>('alDisable');
  late final _alDisable = _alDisablePtr.asFunction<DartAlDisable>(isLeaf: true);

  int alIsEnabled(
    int capability,
  ) {
    return _alIsEnabled(
      capability,
    );
  }

  late final _alIsEnabledPtr =
      _lookup<ffi.NativeFunction<NativeAlIsEnabled>>('alIsEnabled');
  late final _alIsEnabled =
      _alIsEnabledPtr.asFunction<DartAlIsEnabled>(isLeaf: true);

  void alDopplerFactor(
    double value,
  ) {
    return _alDopplerFactor(
      value,
    );
  }

  late final _alDopplerFactorPtr =
      _lookup<ffi.NativeFunction<NativeAlDopplerFactor>>('alDopplerFactor');
  late final _alDopplerFactor =
      _alDopplerFactorPtr.asFunction<DartAlDopplerFactor>(isLeaf: true);

  void alDopplerVelocity(
    double value,
  ) {
    return _alDopplerVelocity(
      value,
    );
  }

  late final _alDopplerVelocityPtr =
      _lookup<ffi.NativeFunction<NativeAlDopplerVelocity>>('alDopplerVelocity');
  late final _alDopplerVelocity =
      _alDopplerVelocityPtr.asFunction<DartAlDopplerVelocity>(isLeaf: true);

  void alSpeedOfSound(
    double value,
  ) {
    return _alSpeedOfSound(
      value,
    );
  }

  late final _alSpeedOfSoundPtr =
      _lookup<ffi.NativeFunction<NativeAlSpeedOfSound>>('alSpeedOfSound');
  late final _alSpeedOfSound =
      _alSpeedOfSoundPtr.asFunction<DartAlSpeedOfSound>(isLeaf: true);

  void alDistanceModel(
    int distanceModel,
  ) {
    return _alDistanceModel(
      distanceModel,
    );
  }

  late final _alDistanceModelPtr =
      _lookup<ffi.NativeFunction<NativeAlDistanceModel>>('alDistanceModel');
  late final _alDistanceModel =
      _alDistanceModelPtr.asFunction<DartAlDistanceModel>(isLeaf: true);

  ffi.Pointer<ALchar> alGetString(
    int param,
  ) {
    return _alGetString(
      param,
    );
  }

  late final _alGetStringPtr =
      _lookup<ffi.NativeFunction<NativeAlGetString>>('alGetString');
  late final _alGetString =
      _alGetStringPtr.asFunction<DartAlGetString>(isLeaf: true);

  void alGetBooleanv(
    int param,
    ffi.Pointer<ALboolean> values,
  ) {
    return _alGetBooleanv(
      param,
      values,
    );
  }

  late final _alGetBooleanvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBooleanv>>('alGetBooleanv');
  late final _alGetBooleanv =
      _alGetBooleanvPtr.asFunction<DartAlGetBooleanv>(isLeaf: true);

  void alGetIntegerv(
    int param,
    ffi.Pointer<ALint> values,
  ) {
    return _alGetIntegerv(
      param,
      values,
    );
  }

  late final _alGetIntegervPtr =
      _lookup<ffi.NativeFunction<NativeAlGetIntegerv>>('alGetIntegerv');
  late final _alGetIntegerv =
      _alGetIntegervPtr.asFunction<DartAlGetIntegerv>(isLeaf: true);

  void alGetFloatv(
    int param,
    ffi.Pointer<ALfloat> values,
  ) {
    return _alGetFloatv(
      param,
      values,
    );
  }

  late final _alGetFloatvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetFloatv>>('alGetFloatv');
  late final _alGetFloatv =
      _alGetFloatvPtr.asFunction<DartAlGetFloatv>(isLeaf: true);

  void alGetDoublev(
    int param,
    ffi.Pointer<ALdouble> values,
  ) {
    return _alGetDoublev(
      param,
      values,
    );
  }

  late final _alGetDoublevPtr =
      _lookup<ffi.NativeFunction<NativeAlGetDoublev>>('alGetDoublev');
  late final _alGetDoublev =
      _alGetDoublevPtr.asFunction<DartAlGetDoublev>(isLeaf: true);

  int alGetBoolean(
    int param,
  ) {
    return _alGetBoolean(
      param,
    );
  }

  late final _alGetBooleanPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBoolean>>('alGetBoolean');
  late final _alGetBoolean =
      _alGetBooleanPtr.asFunction<DartAlGetBoolean>(isLeaf: true);

  int alGetInteger(
    int param,
  ) {
    return _alGetInteger(
      param,
    );
  }

  late final _alGetIntegerPtr =
      _lookup<ffi.NativeFunction<NativeAlGetInteger>>('alGetInteger');
  late final _alGetInteger =
      _alGetIntegerPtr.asFunction<DartAlGetInteger>(isLeaf: true);

  double alGetFloat(
    int param,
  ) {
    return _alGetFloat(
      param,
    );
  }

  late final _alGetFloatPtr =
      _lookup<ffi.NativeFunction<NativeAlGetFloat>>('alGetFloat');
  late final _alGetFloat =
      _alGetFloatPtr.asFunction<DartAlGetFloat>(isLeaf: true);

  double alGetDouble(
    int param,
  ) {
    return _alGetDouble(
      param,
    );
  }

  late final _alGetDoublePtr =
      _lookup<ffi.NativeFunction<NativeAlGetDouble>>('alGetDouble');
  late final _alGetDouble =
      _alGetDoublePtr.asFunction<DartAlGetDouble>(isLeaf: true);

  /// Obtain the first error generated in the AL context since the last call to
  /// this function.
  int alGetError() {
    return _alGetError();
  }

  late final _alGetErrorPtr =
      _lookup<ffi.NativeFunction<NativeAlGetError>>('alGetError');
  late final _alGetError =
      _alGetErrorPtr.asFunction<DartAlGetError>(isLeaf: true);

  /// Query for the presence of an extension on the AL context.
  int alIsExtensionPresent(
    ffi.Pointer<ALchar> extname,
  ) {
    return _alIsExtensionPresent(
      extname,
    );
  }

  late final _alIsExtensionPresentPtr =
      _lookup<ffi.NativeFunction<NativeAlIsExtensionPresent>>(
          'alIsExtensionPresent');
  late final _alIsExtensionPresent = _alIsExtensionPresentPtr
      .asFunction<DartAlIsExtensionPresent>(isLeaf: true);

  /// Retrieve the address of a function. The returned function may be context-
  /// specific.
  ffi.Pointer<ffi.Void> alGetProcAddress(
    ffi.Pointer<ALchar> fname,
  ) {
    return _alGetProcAddress(
      fname,
    );
  }

  late final _alGetProcAddressPtr =
      _lookup<ffi.NativeFunction<NativeAlGetProcAddress>>('alGetProcAddress');
  late final _alGetProcAddress =
      _alGetProcAddressPtr.asFunction<DartAlGetProcAddress>(isLeaf: true);

  /// Retrieve the value of an enum. The returned value may be context-specific.
  int alGetEnumValue(
    ffi.Pointer<ALchar> ename,
  ) {
    return _alGetEnumValue(
      ename,
    );
  }

  late final _alGetEnumValuePtr =
      _lookup<ffi.NativeFunction<NativeAlGetEnumValue>>('alGetEnumValue');
  late final _alGetEnumValue =
      _alGetEnumValuePtr.asFunction<DartAlGetEnumValue>(isLeaf: true);

  void alListenerf(
    int param,
    double value,
  ) {
    return _alListenerf(
      param,
      value,
    );
  }

  late final _alListenerfPtr =
      _lookup<ffi.NativeFunction<NativeAlListenerf>>('alListenerf');
  late final _alListenerf =
      _alListenerfPtr.asFunction<DartAlListenerf>(isLeaf: true);

  void alListener3f(
    int param,
    double value1,
    double value2,
    double value3,
  ) {
    return _alListener3f(
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alListener3fPtr =
      _lookup<ffi.NativeFunction<NativeAlListener3f>>('alListener3f');
  late final _alListener3f =
      _alListener3fPtr.asFunction<DartAlListener3f>(isLeaf: true);

  void alListenerfv(
    int param,
    ffi.Pointer<ALfloat> values,
  ) {
    return _alListenerfv(
      param,
      values,
    );
  }

  late final _alListenerfvPtr =
      _lookup<ffi.NativeFunction<NativeAlListenerfv>>('alListenerfv');
  late final _alListenerfv =
      _alListenerfvPtr.asFunction<DartAlListenerfv>(isLeaf: true);

  void alListeneri(
    int param,
    int value,
  ) {
    return _alListeneri(
      param,
      value,
    );
  }

  late final _alListeneriPtr =
      _lookup<ffi.NativeFunction<NativeAlListeneri>>('alListeneri');
  late final _alListeneri =
      _alListeneriPtr.asFunction<DartAlListeneri>(isLeaf: true);

  void alListener3i(
    int param,
    int value1,
    int value2,
    int value3,
  ) {
    return _alListener3i(
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alListener3iPtr =
      _lookup<ffi.NativeFunction<NativeAlListener3i>>('alListener3i');
  late final _alListener3i =
      _alListener3iPtr.asFunction<DartAlListener3i>(isLeaf: true);

  void alListeneriv(
    int param,
    ffi.Pointer<ALint> values,
  ) {
    return _alListeneriv(
      param,
      values,
    );
  }

  late final _alListenerivPtr =
      _lookup<ffi.NativeFunction<NativeAlListeneriv>>('alListeneriv');
  late final _alListeneriv =
      _alListenerivPtr.asFunction<DartAlListeneriv>(isLeaf: true);

  void alGetListenerf(
    int param,
    ffi.Pointer<ALfloat> value,
  ) {
    return _alGetListenerf(
      param,
      value,
    );
  }

  late final _alGetListenerfPtr =
      _lookup<ffi.NativeFunction<NativeAlGetListenerf>>('alGetListenerf');
  late final _alGetListenerf =
      _alGetListenerfPtr.asFunction<DartAlGetListenerf>(isLeaf: true);

  void alGetListener3f(
    int param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3,
  ) {
    return _alGetListener3f(
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetListener3fPtr =
      _lookup<ffi.NativeFunction<NativeAlGetListener3f>>('alGetListener3f');
  late final _alGetListener3f =
      _alGetListener3fPtr.asFunction<DartAlGetListener3f>(isLeaf: true);

  void alGetListenerfv(
    int param,
    ffi.Pointer<ALfloat> values,
  ) {
    return _alGetListenerfv(
      param,
      values,
    );
  }

  late final _alGetListenerfvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetListenerfv>>('alGetListenerfv');
  late final _alGetListenerfv =
      _alGetListenerfvPtr.asFunction<DartAlGetListenerfv>(isLeaf: true);

  void alGetListeneri(
    int param,
    ffi.Pointer<ALint> value,
  ) {
    return _alGetListeneri(
      param,
      value,
    );
  }

  late final _alGetListeneriPtr =
      _lookup<ffi.NativeFunction<NativeAlGetListeneri>>('alGetListeneri');
  late final _alGetListeneri =
      _alGetListeneriPtr.asFunction<DartAlGetListeneri>(isLeaf: true);

  void alGetListener3i(
    int param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3,
  ) {
    return _alGetListener3i(
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetListener3iPtr =
      _lookup<ffi.NativeFunction<NativeAlGetListener3i>>('alGetListener3i');
  late final _alGetListener3i =
      _alGetListener3iPtr.asFunction<DartAlGetListener3i>(isLeaf: true);

  void alGetListeneriv(
    int param,
    ffi.Pointer<ALint> values,
  ) {
    return _alGetListeneriv(
      param,
      values,
    );
  }

  late final _alGetListenerivPtr =
      _lookup<ffi.NativeFunction<NativeAlGetListeneriv>>('alGetListeneriv');
  late final _alGetListeneriv =
      _alGetListenerivPtr.asFunction<DartAlGetListeneriv>(isLeaf: true);

  /// Create source objects.
  void alGenSources(
    int n,
    ffi.Pointer<ALuint> sources,
  ) {
    return _alGenSources(
      n,
      sources,
    );
  }

  late final _alGenSourcesPtr =
      _lookup<ffi.NativeFunction<NativeAlGenSources>>('alGenSources');
  late final _alGenSources =
      _alGenSourcesPtr.asFunction<DartAlGenSources>(isLeaf: true);

  /// Delete source objects.
  void alDeleteSources(
    int n,
    ffi.Pointer<ALuint> sources,
  ) {
    return _alDeleteSources(
      n,
      sources,
    );
  }

  late final _alDeleteSourcesPtr =
      _lookup<ffi.NativeFunction<NativeAlDeleteSources>>('alDeleteSources');
  late final _alDeleteSources =
      _alDeleteSourcesPtr.asFunction<DartAlDeleteSources>(isLeaf: true);

  /// Verify an ID is for a valid source.
  int alIsSource(
    int source,
  ) {
    return _alIsSource(
      source,
    );
  }

  late final _alIsSourcePtr =
      _lookup<ffi.NativeFunction<NativeAlIsSource>>('alIsSource');
  late final _alIsSource =
      _alIsSourcePtr.asFunction<DartAlIsSource>(isLeaf: true);

  void alSourcef(
    int source,
    int param,
    double value,
  ) {
    return _alSourcef(
      source,
      param,
      value,
    );
  }

  late final _alSourcefPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcef>>('alSourcef');
  late final _alSourcef = _alSourcefPtr.asFunction<DartAlSourcef>(isLeaf: true);

  void alSource3f(
    int source,
    int param,
    double value1,
    double value2,
    double value3,
  ) {
    return _alSource3f(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alSource3fPtr =
      _lookup<ffi.NativeFunction<NativeAlSource3f>>('alSource3f');
  late final _alSource3f =
      _alSource3fPtr.asFunction<DartAlSource3f>(isLeaf: true);

  void alSourcefv(
    int source,
    int param,
    ffi.Pointer<ALfloat> values,
  ) {
    return _alSourcefv(
      source,
      param,
      values,
    );
  }

  late final _alSourcefvPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcefv>>('alSourcefv');
  late final _alSourcefv =
      _alSourcefvPtr.asFunction<DartAlSourcefv>(isLeaf: true);

  void alSourcei(
    int source,
    int param,
    int value,
  ) {
    return _alSourcei(
      source,
      param,
      value,
    );
  }

  late final _alSourceiPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcei>>('alSourcei');
  late final _alSourcei = _alSourceiPtr.asFunction<DartAlSourcei>(isLeaf: true);

  void alSource3i(
    int source,
    int param,
    int value1,
    int value2,
    int value3,
  ) {
    return _alSource3i(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alSource3iPtr =
      _lookup<ffi.NativeFunction<NativeAlSource3i>>('alSource3i');
  late final _alSource3i =
      _alSource3iPtr.asFunction<DartAlSource3i>(isLeaf: true);

  void alSourceiv(
    int source,
    int param,
    ffi.Pointer<ALint> values,
  ) {
    return _alSourceiv(
      source,
      param,
      values,
    );
  }

  late final _alSourceivPtr =
      _lookup<ffi.NativeFunction<NativeAlSourceiv>>('alSourceiv');
  late final _alSourceiv =
      _alSourceivPtr.asFunction<DartAlSourceiv>(isLeaf: true);

  void alGetSourcef(
    int source,
    int param,
    ffi.Pointer<ALfloat> value,
  ) {
    return _alGetSourcef(
      source,
      param,
      value,
    );
  }

  late final _alGetSourcefPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourcef>>('alGetSourcef');
  late final _alGetSourcef =
      _alGetSourcefPtr.asFunction<DartAlGetSourcef>(isLeaf: true);

  void alGetSource3f(
    int source,
    int param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3,
  ) {
    return _alGetSource3f(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetSource3fPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSource3f>>('alGetSource3f');
  late final _alGetSource3f =
      _alGetSource3fPtr.asFunction<DartAlGetSource3f>(isLeaf: true);

  void alGetSourcefv(
    int source,
    int param,
    ffi.Pointer<ALfloat> values,
  ) {
    return _alGetSourcefv(
      source,
      param,
      values,
    );
  }

  late final _alGetSourcefvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourcefv>>('alGetSourcefv');
  late final _alGetSourcefv =
      _alGetSourcefvPtr.asFunction<DartAlGetSourcefv>(isLeaf: true);

  void alGetSourcei(
    int source,
    int param,
    ffi.Pointer<ALint> value,
  ) {
    return _alGetSourcei(
      source,
      param,
      value,
    );
  }

  late final _alGetSourceiPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourcei>>('alGetSourcei');
  late final _alGetSourcei =
      _alGetSourceiPtr.asFunction<DartAlGetSourcei>(isLeaf: true);

  void alGetSource3i(
    int source,
    int param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3,
  ) {
    return _alGetSource3i(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetSource3iPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSource3i>>('alGetSource3i');
  late final _alGetSource3i =
      _alGetSource3iPtr.asFunction<DartAlGetSource3i>(isLeaf: true);

  void alGetSourceiv(
    int source,
    int param,
    ffi.Pointer<ALint> values,
  ) {
    return _alGetSourceiv(
      source,
      param,
      values,
    );
  }

  late final _alGetSourceivPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourceiv>>('alGetSourceiv');
  late final _alGetSourceiv =
      _alGetSourceivPtr.asFunction<DartAlGetSourceiv>(isLeaf: true);

  /// Play, restart, or resume a source, setting its state to AL_PLAYING.
  void alSourcePlay(
    int source,
  ) {
    return _alSourcePlay(
      source,
    );
  }

  late final _alSourcePlayPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcePlay>>('alSourcePlay');
  late final _alSourcePlay =
      _alSourcePlayPtr.asFunction<DartAlSourcePlay>(isLeaf: true);

  /// Stop a source, setting its state to AL_STOPPED if playing or paused.
  void alSourceStop(
    int source,
  ) {
    return _alSourceStop(
      source,
    );
  }

  late final _alSourceStopPtr =
      _lookup<ffi.NativeFunction<NativeAlSourceStop>>('alSourceStop');
  late final _alSourceStop =
      _alSourceStopPtr.asFunction<DartAlSourceStop>(isLeaf: true);

  /// Rewind a source, setting its state to AL_INITIAL.
  void alSourceRewind(
    int source,
  ) {
    return _alSourceRewind(
      source,
    );
  }

  late final _alSourceRewindPtr =
      _lookup<ffi.NativeFunction<NativeAlSourceRewind>>('alSourceRewind');
  late final _alSourceRewind =
      _alSourceRewindPtr.asFunction<DartAlSourceRewind>(isLeaf: true);

  /// Pause a source, setting its state to AL_PAUSED if playing.
  void alSourcePause(
    int source,
  ) {
    return _alSourcePause(
      source,
    );
  }

  late final _alSourcePausePtr =
      _lookup<ffi.NativeFunction<NativeAlSourcePause>>('alSourcePause');
  late final _alSourcePause =
      _alSourcePausePtr.asFunction<DartAlSourcePause>(isLeaf: true);

  /// Play, restart, or resume a list of sources atomically.
  void alSourcePlayv(
    int n,
    ffi.Pointer<ALuint> sources,
  ) {
    return _alSourcePlayv(
      n,
      sources,
    );
  }

  late final _alSourcePlayvPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcePlayv>>('alSourcePlayv');
  late final _alSourcePlayv =
      _alSourcePlayvPtr.asFunction<DartAlSourcePlayv>(isLeaf: true);

  /// Stop a list of sources atomically.
  void alSourceStopv(
    int n,
    ffi.Pointer<ALuint> sources,
  ) {
    return _alSourceStopv(
      n,
      sources,
    );
  }

  late final _alSourceStopvPtr =
      _lookup<ffi.NativeFunction<NativeAlSourceStopv>>('alSourceStopv');
  late final _alSourceStopv =
      _alSourceStopvPtr.asFunction<DartAlSourceStopv>(isLeaf: true);

  /// Rewind a list of sources atomically.
  void alSourceRewindv(
    int n,
    ffi.Pointer<ALuint> sources,
  ) {
    return _alSourceRewindv(
      n,
      sources,
    );
  }

  late final _alSourceRewindvPtr =
      _lookup<ffi.NativeFunction<NativeAlSourceRewindv>>('alSourceRewindv');
  late final _alSourceRewindv =
      _alSourceRewindvPtr.asFunction<DartAlSourceRewindv>(isLeaf: true);

  /// Pause a list of sources atomically.
  void alSourcePausev(
    int n,
    ffi.Pointer<ALuint> sources,
  ) {
    return _alSourcePausev(
      n,
      sources,
    );
  }

  late final _alSourcePausevPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcePausev>>('alSourcePausev');
  late final _alSourcePausev =
      _alSourcePausevPtr.asFunction<DartAlSourcePausev>(isLeaf: true);

  /// Queue buffers onto a source
  void alSourceQueueBuffers(
    int source,
    int nb,
    ffi.Pointer<ALuint> buffers,
  ) {
    return _alSourceQueueBuffers(
      source,
      nb,
      buffers,
    );
  }

  late final _alSourceQueueBuffersPtr =
      _lookup<ffi.NativeFunction<NativeAlSourceQueueBuffers>>(
          'alSourceQueueBuffers');
  late final _alSourceQueueBuffers = _alSourceQueueBuffersPtr
      .asFunction<DartAlSourceQueueBuffers>(isLeaf: true);

  /// Unqueue processed buffers from a source
  void alSourceUnqueueBuffers(
    int source,
    int nb,
    ffi.Pointer<ALuint> buffers,
  ) {
    return _alSourceUnqueueBuffers(
      source,
      nb,
      buffers,
    );
  }

  late final _alSourceUnqueueBuffersPtr =
      _lookup<ffi.NativeFunction<NativeAlSourceUnqueueBuffers>>(
          'alSourceUnqueueBuffers');
  late final _alSourceUnqueueBuffers = _alSourceUnqueueBuffersPtr
      .asFunction<DartAlSourceUnqueueBuffers>(isLeaf: true);

  /// Create buffer objects
  void alGenBuffers(
    int n,
    ffi.Pointer<ALuint> buffers,
  ) {
    return _alGenBuffers(
      n,
      buffers,
    );
  }

  late final _alGenBuffersPtr =
      _lookup<ffi.NativeFunction<NativeAlGenBuffers>>('alGenBuffers');
  late final _alGenBuffers =
      _alGenBuffersPtr.asFunction<DartAlGenBuffers>(isLeaf: true);

  /// Delete buffer objects
  void alDeleteBuffers(
    int n,
    ffi.Pointer<ALuint> buffers,
  ) {
    return _alDeleteBuffers(
      n,
      buffers,
    );
  }

  late final _alDeleteBuffersPtr =
      _lookup<ffi.NativeFunction<NativeAlDeleteBuffers>>('alDeleteBuffers');
  late final _alDeleteBuffers =
      _alDeleteBuffersPtr.asFunction<DartAlDeleteBuffers>(isLeaf: true);

  /// Verify an ID is a valid buffer (including the NULL buffer)
  int alIsBuffer(
    int buffer,
  ) {
    return _alIsBuffer(
      buffer,
    );
  }

  late final _alIsBufferPtr =
      _lookup<ffi.NativeFunction<NativeAlIsBuffer>>('alIsBuffer');
  late final _alIsBuffer =
      _alIsBufferPtr.asFunction<DartAlIsBuffer>(isLeaf: true);

  /// Copies data into the buffer, interpreting it using the specified format and
  /// samplerate.
  void alBufferData(
    int buffer,
    int format,
    ffi.Pointer<ALvoid> data,
    int size,
    int samplerate,
  ) {
    return _alBufferData(
      buffer,
      format,
      data,
      size,
      samplerate,
    );
  }

  late final _alBufferDataPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferData>>('alBufferData');
  late final _alBufferData =
      _alBufferDataPtr.asFunction<DartAlBufferData>(isLeaf: true);

  void alBufferf(
    int buffer,
    int param,
    double value,
  ) {
    return _alBufferf(
      buffer,
      param,
      value,
    );
  }

  late final _alBufferfPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferf>>('alBufferf');
  late final _alBufferf = _alBufferfPtr.asFunction<DartAlBufferf>(isLeaf: true);

  void alBuffer3f(
    int buffer,
    int param,
    double value1,
    double value2,
    double value3,
  ) {
    return _alBuffer3f(
      buffer,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alBuffer3fPtr =
      _lookup<ffi.NativeFunction<NativeAlBuffer3f>>('alBuffer3f');
  late final _alBuffer3f =
      _alBuffer3fPtr.asFunction<DartAlBuffer3f>(isLeaf: true);

  void alBufferfv(
    int buffer,
    int param,
    ffi.Pointer<ALfloat> values,
  ) {
    return _alBufferfv(
      buffer,
      param,
      values,
    );
  }

  late final _alBufferfvPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferfv>>('alBufferfv');
  late final _alBufferfv =
      _alBufferfvPtr.asFunction<DartAlBufferfv>(isLeaf: true);

  void alBufferi(
    int buffer,
    int param,
    int value,
  ) {
    return _alBufferi(
      buffer,
      param,
      value,
    );
  }

  late final _alBufferiPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferi>>('alBufferi');
  late final _alBufferi = _alBufferiPtr.asFunction<DartAlBufferi>(isLeaf: true);

  void alBuffer3i(
    int buffer,
    int param,
    int value1,
    int value2,
    int value3,
  ) {
    return _alBuffer3i(
      buffer,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alBuffer3iPtr =
      _lookup<ffi.NativeFunction<NativeAlBuffer3i>>('alBuffer3i');
  late final _alBuffer3i =
      _alBuffer3iPtr.asFunction<DartAlBuffer3i>(isLeaf: true);

  void alBufferiv(
    int buffer,
    int param,
    ffi.Pointer<ALint> values,
  ) {
    return _alBufferiv(
      buffer,
      param,
      values,
    );
  }

  late final _alBufferivPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferiv>>('alBufferiv');
  late final _alBufferiv =
      _alBufferivPtr.asFunction<DartAlBufferiv>(isLeaf: true);

  void alGetBufferf(
    int buffer,
    int param,
    ffi.Pointer<ALfloat> value,
  ) {
    return _alGetBufferf(
      buffer,
      param,
      value,
    );
  }

  late final _alGetBufferfPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBufferf>>('alGetBufferf');
  late final _alGetBufferf =
      _alGetBufferfPtr.asFunction<DartAlGetBufferf>(isLeaf: true);

  void alGetBuffer3f(
    int buffer,
    int param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3,
  ) {
    return _alGetBuffer3f(
      buffer,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetBuffer3fPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBuffer3f>>('alGetBuffer3f');
  late final _alGetBuffer3f =
      _alGetBuffer3fPtr.asFunction<DartAlGetBuffer3f>(isLeaf: true);

  void alGetBufferfv(
    int buffer,
    int param,
    ffi.Pointer<ALfloat> values,
  ) {
    return _alGetBufferfv(
      buffer,
      param,
      values,
    );
  }

  late final _alGetBufferfvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBufferfv>>('alGetBufferfv');
  late final _alGetBufferfv =
      _alGetBufferfvPtr.asFunction<DartAlGetBufferfv>(isLeaf: true);

  void alGetBufferi(
    int buffer,
    int param,
    ffi.Pointer<ALint> value,
  ) {
    return _alGetBufferi(
      buffer,
      param,
      value,
    );
  }

  late final _alGetBufferiPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBufferi>>('alGetBufferi');
  late final _alGetBufferi =
      _alGetBufferiPtr.asFunction<DartAlGetBufferi>(isLeaf: true);

  void alGetBuffer3i(
    int buffer,
    int param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3,
  ) {
    return _alGetBuffer3i(
      buffer,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetBuffer3iPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBuffer3i>>('alGetBuffer3i');
  late final _alGetBuffer3i =
      _alGetBuffer3iPtr.asFunction<DartAlGetBuffer3i>(isLeaf: true);

  void alGetBufferiv(
    int buffer,
    int param,
    ffi.Pointer<ALint> values,
  ) {
    return _alGetBufferiv(
      buffer,
      param,
      values,
    );
  }

  late final _alGetBufferivPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBufferiv>>('alGetBufferiv');
  late final _alGetBufferiv =
      _alGetBufferivPtr.asFunction<DartAlGetBufferiv>(isLeaf: true);

  /// Create and attach a context to the given device.
  ffi.Pointer<ALCcontext> alcCreateContext(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCint> attrlist,
  ) {
    return _alcCreateContext(
      device,
      attrlist,
    );
  }

  late final _alcCreateContextPtr =
      _lookup<ffi.NativeFunction<NativeAlcCreateContext>>('alcCreateContext');
  late final _alcCreateContext =
      _alcCreateContextPtr.asFunction<DartAlcCreateContext>(isLeaf: true);

  /// Makes the given context the active process-wide context. Passing NULL clears
  /// the active context.
  int alcMakeContextCurrent(
    ffi.Pointer<ALCcontext> context,
  ) {
    return _alcMakeContextCurrent(
      context,
    );
  }

  late final _alcMakeContextCurrentPtr =
      _lookup<ffi.NativeFunction<NativeAlcMakeContextCurrent>>(
          'alcMakeContextCurrent');
  late final _alcMakeContextCurrent = _alcMakeContextCurrentPtr
      .asFunction<DartAlcMakeContextCurrent>(isLeaf: true);

  /// Resumes processing updates for the given context.
  void alcProcessContext(
    ffi.Pointer<ALCcontext> context,
  ) {
    return _alcProcessContext(
      context,
    );
  }

  late final _alcProcessContextPtr =
      _lookup<ffi.NativeFunction<NativeAlcProcessContext>>('alcProcessContext');
  late final _alcProcessContext =
      _alcProcessContextPtr.asFunction<DartAlcProcessContext>(isLeaf: true);

  /// Suspends updates for the given context.
  void alcSuspendContext(
    ffi.Pointer<ALCcontext> context,
  ) {
    return _alcSuspendContext(
      context,
    );
  }

  late final _alcSuspendContextPtr =
      _lookup<ffi.NativeFunction<NativeAlcSuspendContext>>('alcSuspendContext');
  late final _alcSuspendContext =
      _alcSuspendContextPtr.asFunction<DartAlcSuspendContext>(isLeaf: true);

  /// Remove a context from its device and destroys it.
  void alcDestroyContext(
    ffi.Pointer<ALCcontext> context,
  ) {
    return _alcDestroyContext(
      context,
    );
  }

  late final _alcDestroyContextPtr =
      _lookup<ffi.NativeFunction<NativeAlcDestroyContext>>('alcDestroyContext');
  late final _alcDestroyContext =
      _alcDestroyContextPtr.asFunction<DartAlcDestroyContext>(isLeaf: true);

  /// Returns the currently active context.
  ffi.Pointer<ALCcontext> alcGetCurrentContext() {
    return _alcGetCurrentContext();
  }

  late final _alcGetCurrentContextPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetCurrentContext>>(
          'alcGetCurrentContext');
  late final _alcGetCurrentContext = _alcGetCurrentContextPtr
      .asFunction<DartAlcGetCurrentContext>(isLeaf: true);

  /// Returns the device that a particular context is attached to.
  ffi.Pointer<ALCdevice> alcGetContextsDevice(
    ffi.Pointer<ALCcontext> context,
  ) {
    return _alcGetContextsDevice(
      context,
    );
  }

  late final _alcGetContextsDevicePtr =
      _lookup<ffi.NativeFunction<NativeAlcGetContextsDevice>>(
          'alcGetContextsDevice');
  late final _alcGetContextsDevice = _alcGetContextsDevicePtr
      .asFunction<DartAlcGetContextsDevice>(isLeaf: true);

  /// Opens the named playback device.
  ffi.Pointer<ALCdevice> alcOpenDevice(
    ffi.Pointer<ALCchar> devicename,
  ) {
    return _alcOpenDevice(
      devicename,
    );
  }

  late final _alcOpenDevicePtr =
      _lookup<ffi.NativeFunction<NativeAlcOpenDevice>>('alcOpenDevice');
  late final _alcOpenDevice =
      _alcOpenDevicePtr.asFunction<DartAlcOpenDevice>(isLeaf: true);

  /// Closes the given playback device.
  int alcCloseDevice(
    ffi.Pointer<ALCdevice> device,
  ) {
    return _alcCloseDevice(
      device,
    );
  }

  late final _alcCloseDevicePtr =
      _lookup<ffi.NativeFunction<NativeAlcCloseDevice>>('alcCloseDevice');
  late final _alcCloseDevice =
      _alcCloseDevicePtr.asFunction<DartAlcCloseDevice>(isLeaf: true);

  /// Obtain the most recent Device error.
  int alcGetError(
    ffi.Pointer<ALCdevice> device,
  ) {
    return _alcGetError(
      device,
    );
  }

  late final _alcGetErrorPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetError>>('alcGetError');
  late final _alcGetError =
      _alcGetErrorPtr.asFunction<DartAlcGetError>(isLeaf: true);

  /// Query for the presence of an extension on the device. Pass a NULL device to
  /// query a device-inspecific extension.
  int alcIsExtensionPresent(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCchar> extname,
  ) {
    return _alcIsExtensionPresent(
      device,
      extname,
    );
  }

  late final _alcIsExtensionPresentPtr =
      _lookup<ffi.NativeFunction<NativeAlcIsExtensionPresent>>(
          'alcIsExtensionPresent');
  late final _alcIsExtensionPresent = _alcIsExtensionPresentPtr
      .asFunction<DartAlcIsExtensionPresent>(isLeaf: true);

  /// Retrieve the address of a function. Given a non-NULL device, the returned
  /// function may be device-specific.
  ffi.Pointer<ALCvoid> alcGetProcAddress(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCchar> funcname,
  ) {
    return _alcGetProcAddress(
      device,
      funcname,
    );
  }

  late final _alcGetProcAddressPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetProcAddress>>('alcGetProcAddress');
  late final _alcGetProcAddress =
      _alcGetProcAddressPtr.asFunction<DartAlcGetProcAddress>(isLeaf: true);

  /// Retrieve the value of an enum. Given a non-NULL device, the returned value
  /// may be device-specific.
  int alcGetEnumValue(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCchar> enumname,
  ) {
    return _alcGetEnumValue(
      device,
      enumname,
    );
  }

  late final _alcGetEnumValuePtr =
      _lookup<ffi.NativeFunction<NativeAlcGetEnumValue>>('alcGetEnumValue');
  late final _alcGetEnumValue =
      _alcGetEnumValuePtr.asFunction<DartAlcGetEnumValue>(isLeaf: true);

  /// Returns information about the device, and error strings.
  ffi.Pointer<ALCchar> alcGetString(
    ffi.Pointer<ALCdevice> device,
    int param,
  ) {
    return _alcGetString(
      device,
      param,
    );
  }

  late final _alcGetStringPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetString>>('alcGetString');
  late final _alcGetString =
      _alcGetStringPtr.asFunction<DartAlcGetString>(isLeaf: true);

  /// Returns information about the device and the version of OpenAL.
  void alcGetIntegerv(
    ffi.Pointer<ALCdevice> device,
    int param,
    int size,
    ffi.Pointer<ALCint> values,
  ) {
    return _alcGetIntegerv(
      device,
      param,
      size,
      values,
    );
  }

  late final _alcGetIntegervPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetIntegerv>>('alcGetIntegerv');
  late final _alcGetIntegerv =
      _alcGetIntegervPtr.asFunction<DartAlcGetIntegerv>(isLeaf: true);

  /// Opens the named capture device with the given frequency, format, and buffer
  /// size.
  ffi.Pointer<ALCdevice> alcCaptureOpenDevice(
    ffi.Pointer<ALCchar> devicename,
    int frequency,
    int format,
    int buffersize,
  ) {
    return _alcCaptureOpenDevice(
      devicename,
      frequency,
      format,
      buffersize,
    );
  }

  late final _alcCaptureOpenDevicePtr =
      _lookup<ffi.NativeFunction<NativeAlcCaptureOpenDevice>>(
          'alcCaptureOpenDevice');
  late final _alcCaptureOpenDevice = _alcCaptureOpenDevicePtr
      .asFunction<DartAlcCaptureOpenDevice>(isLeaf: true);

  /// Closes the given capture device.
  int alcCaptureCloseDevice(
    ffi.Pointer<ALCdevice> device,
  ) {
    return _alcCaptureCloseDevice(
      device,
    );
  }

  late final _alcCaptureCloseDevicePtr =
      _lookup<ffi.NativeFunction<NativeAlcCaptureCloseDevice>>(
          'alcCaptureCloseDevice');
  late final _alcCaptureCloseDevice = _alcCaptureCloseDevicePtr
      .asFunction<DartAlcCaptureCloseDevice>(isLeaf: true);

  /// Starts capturing samples into the device buffer.
  void alcCaptureStart(
    ffi.Pointer<ALCdevice> device,
  ) {
    return _alcCaptureStart(
      device,
    );
  }

  late final _alcCaptureStartPtr =
      _lookup<ffi.NativeFunction<NativeAlcCaptureStart>>('alcCaptureStart');
  late final _alcCaptureStart =
      _alcCaptureStartPtr.asFunction<DartAlcCaptureStart>(isLeaf: true);

  /// Stops capturing samples. Samples in the device buffer remain available.
  void alcCaptureStop(
    ffi.Pointer<ALCdevice> device,
  ) {
    return _alcCaptureStop(
      device,
    );
  }

  late final _alcCaptureStopPtr =
      _lookup<ffi.NativeFunction<NativeAlcCaptureStop>>('alcCaptureStop');
  late final _alcCaptureStop =
      _alcCaptureStopPtr.asFunction<DartAlcCaptureStop>(isLeaf: true);

  /// Reads samples from the device buffer.
  void alcCaptureSamples(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCvoid> buffer,
    int samples,
  ) {
    return _alcCaptureSamples(
      device,
      buffer,
      samples,
    );
  }

  late final _alcCaptureSamplesPtr =
      _lookup<ffi.NativeFunction<NativeAlcCaptureSamples>>('alcCaptureSamples');
  late final _alcCaptureSamples =
      _alcCaptureSamplesPtr.asFunction<DartAlcCaptureSamples>(isLeaf: true);

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<Native__va_start>>('__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<Dart__va_start>(isLeaf: true);

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<Native__security_init_cookie>>(
          '__security_init_cookie');
  late final ___security_init_cookie = ___security_init_cookiePtr
      .asFunction<Dart__security_init_cookie>(isLeaf: true);

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<Native__security_check_cookie>>(
          '__security_check_cookie');
  late final ___security_check_cookie = ___security_check_cookiePtr
      .asFunction<Dart__security_check_cookie>(isLeaf: true);

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<Native__report_gsfailure>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<Dart__report_gsfailure>(isLeaf: true);

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<Native_invalid_parameter_noinfo>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo = __invalid_parameter_noinfoPtr
      .asFunction<Dart_invalid_parameter_noinfo>(isLeaf: true);

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<Native_invalid_parameter_noinfo_noreturn>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr
          .asFunction<Dart_invalid_parameter_noinfo_noreturn>(isLeaf: true);

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr =
      _lookup<ffi.NativeFunction<Native_invoke_watson>>('_invoke_watson');
  late final __invoke_watson =
      __invoke_watsonPtr.asFunction<Dart_invoke_watson>(isLeaf: true);

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr = _lookup<ffi.NativeFunction<Native_errno>>('_errno');
  late final __errno = __errnoPtr.asFunction<Dart_errno>(isLeaf: true);

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<Native_set_errno>>('_set_errno');
  late final __set_errno =
      __set_errnoPtr.asFunction<Dart_set_errno>(isLeaf: true);

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<Native_get_errno>>('_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<Dart_get_errno>(isLeaf: true);

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<Native__threadid>>('__threadid');
  late final ___threadid =
      ___threadidPtr.asFunction<Dart__threadid>(isLeaf: true);

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<Native__threadhandle>>('__threadhandle');
  late final ___threadhandle =
      ___threadhandlePtr.asFunction<Dart__threadhandle>(isLeaf: true);

  void alBufferDataStatic(
    int buffer,
    int format,
    ffi.Pointer<ALvoid> data,
    int size,
    int freq,
  ) {
    return _alBufferDataStatic(
      buffer,
      format,
      data,
      size,
      freq,
    );
  }

  late final _alBufferDataStaticPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferDataStatic>>(
          'alBufferDataStatic');
  late final _alBufferDataStatic =
      _alBufferDataStaticPtr.asFunction<DartAlBufferDataStatic>(isLeaf: true);

  int _clearfp() {
    return __clearfp();
  }

  late final __clearfpPtr =
      _lookup<ffi.NativeFunction<Native_clearfp>>('_clearfp');
  late final __clearfp = __clearfpPtr.asFunction<Dart_clearfp>(isLeaf: true);

  int _controlfp(
    int _NewValue,
    int _Mask,
  ) {
    return __controlfp(
      _NewValue,
      _Mask,
    );
  }

  late final __controlfpPtr =
      _lookup<ffi.NativeFunction<Native_controlfp>>('_controlfp');
  late final __controlfp =
      __controlfpPtr.asFunction<Dart_controlfp>(isLeaf: true);

  void _set_controlfp(
    int _NewValue,
    int _Mask,
  ) {
    return __set_controlfp(
      _NewValue,
      _Mask,
    );
  }

  late final __set_controlfpPtr =
      _lookup<ffi.NativeFunction<Native_set_controlfp>>('_set_controlfp');
  late final __set_controlfp =
      __set_controlfpPtr.asFunction<Dart_set_controlfp>(isLeaf: true);

  int _controlfp_s(
    ffi.Pointer<ffi.UnsignedInt> _CurrentState,
    int _NewValue,
    int _Mask,
  ) {
    return __controlfp_s(
      _CurrentState,
      _NewValue,
      _Mask,
    );
  }

  late final __controlfp_sPtr =
      _lookup<ffi.NativeFunction<Native_controlfp_s>>('_controlfp_s');
  late final __controlfp_s =
      __controlfp_sPtr.asFunction<Dart_controlfp_s>(isLeaf: true);

  int _statusfp() {
    return __statusfp();
  }

  late final __statusfpPtr =
      _lookup<ffi.NativeFunction<Native_statusfp>>('_statusfp');
  late final __statusfp = __statusfpPtr.asFunction<Dart_statusfp>(isLeaf: true);

  void _fpreset() {
    return __fpreset();
  }

  late final __fpresetPtr =
      _lookup<ffi.NativeFunction<Native_fpreset>>('_fpreset');
  late final __fpreset = __fpresetPtr.asFunction<Dart_fpreset>(isLeaf: true);

  int _control87(
    int _NewValue,
    int _Mask,
  ) {
    return __control87(
      _NewValue,
      _Mask,
    );
  }

  late final __control87Ptr =
      _lookup<ffi.NativeFunction<Native_control87>>('_control87');
  late final __control87 =
      __control87Ptr.asFunction<Dart_control87>(isLeaf: true);

  ffi.Pointer<ffi.Int> __fpecode() {
    return ___fpecode();
  }

  late final ___fpecodePtr =
      _lookup<ffi.NativeFunction<Native__fpecode>>('__fpecode');
  late final ___fpecode = ___fpecodePtr.asFunction<Dart__fpecode>(isLeaf: true);

  int __fpe_flt_rounds() {
    return ___fpe_flt_rounds();
  }

  late final ___fpe_flt_roundsPtr =
      _lookup<ffi.NativeFunction<Native__fpe_flt_rounds>>('__fpe_flt_rounds');
  late final ___fpe_flt_rounds =
      ___fpe_flt_roundsPtr.asFunction<Dart__fpe_flt_rounds>(isLeaf: true);

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return __copysign(
      _Number,
      _Sign,
    );
  }

  late final __copysignPtr =
      _lookup<ffi.NativeFunction<Native_copysign>>('_copysign');
  late final __copysign = __copysignPtr.asFunction<Dart_copysign>(isLeaf: true);

  double _chgsign(
    double _X,
  ) {
    return __chgsign(
      _X,
    );
  }

  late final __chgsignPtr =
      _lookup<ffi.NativeFunction<Native_chgsign>>('_chgsign');
  late final __chgsign = __chgsignPtr.asFunction<Dart_chgsign>(isLeaf: true);

  double _scalb(
    double _X,
    int _Y,
  ) {
    return __scalb(
      _X,
      _Y,
    );
  }

  late final __scalbPtr = _lookup<ffi.NativeFunction<Native_scalb>>('_scalb');
  late final __scalb = __scalbPtr.asFunction<Dart_scalb>(isLeaf: true);

  double _logb(
    double _X,
  ) {
    return __logb(
      _X,
    );
  }

  late final __logbPtr = _lookup<ffi.NativeFunction<Native_logb>>('_logb');
  late final __logb = __logbPtr.asFunction<Dart_logb>(isLeaf: true);

  double _nextafter(
    double _X,
    double _Y,
  ) {
    return __nextafter(
      _X,
      _Y,
    );
  }

  late final __nextafterPtr =
      _lookup<ffi.NativeFunction<Native_nextafter>>('_nextafter');
  late final __nextafter =
      __nextafterPtr.asFunction<Dart_nextafter>(isLeaf: true);

  int _finite(
    double _X,
  ) {
    return __finite(
      _X,
    );
  }

  late final __finitePtr =
      _lookup<ffi.NativeFunction<Native_finite>>('_finite');
  late final __finite = __finitePtr.asFunction<Dart_finite>(isLeaf: true);

  int _isnan(
    double _X,
  ) {
    return __isnan(
      _X,
    );
  }

  late final __isnanPtr = _lookup<ffi.NativeFunction<Native_isnan>>('_isnan');
  late final __isnan = __isnanPtr.asFunction<Dart_isnan>(isLeaf: true);

  int _fpclass(
    double _X,
  ) {
    return __fpclass(
      _X,
    );
  }

  late final __fpclassPtr =
      _lookup<ffi.NativeFunction<Native_fpclass>>('_fpclass');
  late final __fpclass = __fpclassPtr.asFunction<Dart_fpclass>(isLeaf: true);

  double _scalbf(
    double _X,
    int _Y,
  ) {
    return __scalbf(
      _X,
      _Y,
    );
  }

  late final __scalbfPtr =
      _lookup<ffi.NativeFunction<Native_scalbf>>('_scalbf');
  late final __scalbf = __scalbfPtr.asFunction<Dart_scalbf>(isLeaf: true);

  void fpreset() {
    return _fpreset1();
  }

  late final _fpresetPtr =
      _lookup<ffi.NativeFunction<NativeFpreset>>('fpreset');
  late final _fpreset1 = _fpresetPtr.asFunction<DartFpreset>(isLeaf: true);

  void alGenEffects(
    int n,
    ffi.Pointer<ALuint> effects,
  ) {
    return _alGenEffects(
      n,
      effects,
    );
  }

  late final _alGenEffectsPtr =
      _lookup<ffi.NativeFunction<NativeAlGenEffects>>('alGenEffects');
  late final _alGenEffects =
      _alGenEffectsPtr.asFunction<DartAlGenEffects>(isLeaf: true);

  void alDeleteEffects(
    int n,
    ffi.Pointer<ALuint> effects,
  ) {
    return _alDeleteEffects(
      n,
      effects,
    );
  }

  late final _alDeleteEffectsPtr =
      _lookup<ffi.NativeFunction<NativeAlDeleteEffects>>('alDeleteEffects');
  late final _alDeleteEffects =
      _alDeleteEffectsPtr.asFunction<DartAlDeleteEffects>(isLeaf: true);

  int alIsEffect(
    int effect,
  ) {
    return _alIsEffect(
      effect,
    );
  }

  late final _alIsEffectPtr =
      _lookup<ffi.NativeFunction<NativeAlIsEffect>>('alIsEffect');
  late final _alIsEffect =
      _alIsEffectPtr.asFunction<DartAlIsEffect>(isLeaf: true);

  void alEffecti(
    int effect,
    int param,
    int iValue,
  ) {
    return _alEffecti(
      effect,
      param,
      iValue,
    );
  }

  late final _alEffectiPtr =
      _lookup<ffi.NativeFunction<NativeAlEffecti>>('alEffecti');
  late final _alEffecti = _alEffectiPtr.asFunction<DartAlEffecti>(isLeaf: true);

  void alEffectiv(
    int effect,
    int param,
    ffi.Pointer<ALint> piValues,
  ) {
    return _alEffectiv(
      effect,
      param,
      piValues,
    );
  }

  late final _alEffectivPtr =
      _lookup<ffi.NativeFunction<NativeAlEffectiv>>('alEffectiv');
  late final _alEffectiv =
      _alEffectivPtr.asFunction<DartAlEffectiv>(isLeaf: true);

  void alEffectf(
    int effect,
    int param,
    double flValue,
  ) {
    return _alEffectf(
      effect,
      param,
      flValue,
    );
  }

  late final _alEffectfPtr =
      _lookup<ffi.NativeFunction<NativeAlEffectf>>('alEffectf');
  late final _alEffectf = _alEffectfPtr.asFunction<DartAlEffectf>(isLeaf: true);

  void alEffectfv(
    int effect,
    int param,
    ffi.Pointer<ALfloat> pflValues,
  ) {
    return _alEffectfv(
      effect,
      param,
      pflValues,
    );
  }

  late final _alEffectfvPtr =
      _lookup<ffi.NativeFunction<NativeAlEffectfv>>('alEffectfv');
  late final _alEffectfv =
      _alEffectfvPtr.asFunction<DartAlEffectfv>(isLeaf: true);

  void alGetEffecti(
    int effect,
    int param,
    ffi.Pointer<ALint> piValue,
  ) {
    return _alGetEffecti(
      effect,
      param,
      piValue,
    );
  }

  late final _alGetEffectiPtr =
      _lookup<ffi.NativeFunction<NativeAlGetEffecti>>('alGetEffecti');
  late final _alGetEffecti =
      _alGetEffectiPtr.asFunction<DartAlGetEffecti>(isLeaf: true);

  void alGetEffectiv(
    int effect,
    int param,
    ffi.Pointer<ALint> piValues,
  ) {
    return _alGetEffectiv(
      effect,
      param,
      piValues,
    );
  }

  late final _alGetEffectivPtr =
      _lookup<ffi.NativeFunction<NativeAlGetEffectiv>>('alGetEffectiv');
  late final _alGetEffectiv =
      _alGetEffectivPtr.asFunction<DartAlGetEffectiv>(isLeaf: true);

  void alGetEffectf(
    int effect,
    int param,
    ffi.Pointer<ALfloat> pflValue,
  ) {
    return _alGetEffectf(
      effect,
      param,
      pflValue,
    );
  }

  late final _alGetEffectfPtr =
      _lookup<ffi.NativeFunction<NativeAlGetEffectf>>('alGetEffectf');
  late final _alGetEffectf =
      _alGetEffectfPtr.asFunction<DartAlGetEffectf>(isLeaf: true);

  void alGetEffectfv(
    int effect,
    int param,
    ffi.Pointer<ALfloat> pflValues,
  ) {
    return _alGetEffectfv(
      effect,
      param,
      pflValues,
    );
  }

  late final _alGetEffectfvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetEffectfv>>('alGetEffectfv');
  late final _alGetEffectfv =
      _alGetEffectfvPtr.asFunction<DartAlGetEffectfv>(isLeaf: true);

  void alGenFilters(
    int n,
    ffi.Pointer<ALuint> filters,
  ) {
    return _alGenFilters(
      n,
      filters,
    );
  }

  late final _alGenFiltersPtr =
      _lookup<ffi.NativeFunction<NativeAlGenFilters>>('alGenFilters');
  late final _alGenFilters =
      _alGenFiltersPtr.asFunction<DartAlGenFilters>(isLeaf: true);

  void alDeleteFilters(
    int n,
    ffi.Pointer<ALuint> filters,
  ) {
    return _alDeleteFilters(
      n,
      filters,
    );
  }

  late final _alDeleteFiltersPtr =
      _lookup<ffi.NativeFunction<NativeAlDeleteFilters>>('alDeleteFilters');
  late final _alDeleteFilters =
      _alDeleteFiltersPtr.asFunction<DartAlDeleteFilters>(isLeaf: true);

  int alIsFilter(
    int filter,
  ) {
    return _alIsFilter(
      filter,
    );
  }

  late final _alIsFilterPtr =
      _lookup<ffi.NativeFunction<NativeAlIsFilter>>('alIsFilter');
  late final _alIsFilter =
      _alIsFilterPtr.asFunction<DartAlIsFilter>(isLeaf: true);

  void alFilteri(
    int filter,
    int param,
    int iValue,
  ) {
    return _alFilteri(
      filter,
      param,
      iValue,
    );
  }

  late final _alFilteriPtr =
      _lookup<ffi.NativeFunction<NativeAlFilteri>>('alFilteri');
  late final _alFilteri = _alFilteriPtr.asFunction<DartAlFilteri>(isLeaf: true);

  void alFilteriv(
    int filter,
    int param,
    ffi.Pointer<ALint> piValues,
  ) {
    return _alFilteriv(
      filter,
      param,
      piValues,
    );
  }

  late final _alFilterivPtr =
      _lookup<ffi.NativeFunction<NativeAlFilteriv>>('alFilteriv');
  late final _alFilteriv =
      _alFilterivPtr.asFunction<DartAlFilteriv>(isLeaf: true);

  void alFilterf(
    int filter,
    int param,
    double flValue,
  ) {
    return _alFilterf(
      filter,
      param,
      flValue,
    );
  }

  late final _alFilterfPtr =
      _lookup<ffi.NativeFunction<NativeAlFilterf>>('alFilterf');
  late final _alFilterf = _alFilterfPtr.asFunction<DartAlFilterf>(isLeaf: true);

  void alFilterfv(
    int filter,
    int param,
    ffi.Pointer<ALfloat> pflValues,
  ) {
    return _alFilterfv(
      filter,
      param,
      pflValues,
    );
  }

  late final _alFilterfvPtr =
      _lookup<ffi.NativeFunction<NativeAlFilterfv>>('alFilterfv');
  late final _alFilterfv =
      _alFilterfvPtr.asFunction<DartAlFilterfv>(isLeaf: true);

  void alGetFilteri(
    int filter,
    int param,
    ffi.Pointer<ALint> piValue,
  ) {
    return _alGetFilteri(
      filter,
      param,
      piValue,
    );
  }

  late final _alGetFilteriPtr =
      _lookup<ffi.NativeFunction<NativeAlGetFilteri>>('alGetFilteri');
  late final _alGetFilteri =
      _alGetFilteriPtr.asFunction<DartAlGetFilteri>(isLeaf: true);

  void alGetFilteriv(
    int filter,
    int param,
    ffi.Pointer<ALint> piValues,
  ) {
    return _alGetFilteriv(
      filter,
      param,
      piValues,
    );
  }

  late final _alGetFilterivPtr =
      _lookup<ffi.NativeFunction<NativeAlGetFilteriv>>('alGetFilteriv');
  late final _alGetFilteriv =
      _alGetFilterivPtr.asFunction<DartAlGetFilteriv>(isLeaf: true);

  void alGetFilterf(
    int filter,
    int param,
    ffi.Pointer<ALfloat> pflValue,
  ) {
    return _alGetFilterf(
      filter,
      param,
      pflValue,
    );
  }

  late final _alGetFilterfPtr =
      _lookup<ffi.NativeFunction<NativeAlGetFilterf>>('alGetFilterf');
  late final _alGetFilterf =
      _alGetFilterfPtr.asFunction<DartAlGetFilterf>(isLeaf: true);

  void alGetFilterfv(
    int filter,
    int param,
    ffi.Pointer<ALfloat> pflValues,
  ) {
    return _alGetFilterfv(
      filter,
      param,
      pflValues,
    );
  }

  late final _alGetFilterfvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetFilterfv>>('alGetFilterfv');
  late final _alGetFilterfv =
      _alGetFilterfvPtr.asFunction<DartAlGetFilterfv>(isLeaf: true);

  void alGenAuxiliaryEffectSlots(
    int n,
    ffi.Pointer<ALuint> effectslots,
  ) {
    return _alGenAuxiliaryEffectSlots(
      n,
      effectslots,
    );
  }

  late final _alGenAuxiliaryEffectSlotsPtr =
      _lookup<ffi.NativeFunction<NativeAlGenAuxiliaryEffectSlots>>(
          'alGenAuxiliaryEffectSlots');
  late final _alGenAuxiliaryEffectSlots = _alGenAuxiliaryEffectSlotsPtr
      .asFunction<DartAlGenAuxiliaryEffectSlots>(isLeaf: true);

  void alDeleteAuxiliaryEffectSlots(
    int n,
    ffi.Pointer<ALuint> effectslots,
  ) {
    return _alDeleteAuxiliaryEffectSlots(
      n,
      effectslots,
    );
  }

  late final _alDeleteAuxiliaryEffectSlotsPtr =
      _lookup<ffi.NativeFunction<NativeAlDeleteAuxiliaryEffectSlots>>(
          'alDeleteAuxiliaryEffectSlots');
  late final _alDeleteAuxiliaryEffectSlots = _alDeleteAuxiliaryEffectSlotsPtr
      .asFunction<DartAlDeleteAuxiliaryEffectSlots>(isLeaf: true);

  int alIsAuxiliaryEffectSlot(
    int effectslot,
  ) {
    return _alIsAuxiliaryEffectSlot(
      effectslot,
    );
  }

  late final _alIsAuxiliaryEffectSlotPtr =
      _lookup<ffi.NativeFunction<NativeAlIsAuxiliaryEffectSlot>>(
          'alIsAuxiliaryEffectSlot');
  late final _alIsAuxiliaryEffectSlot = _alIsAuxiliaryEffectSlotPtr
      .asFunction<DartAlIsAuxiliaryEffectSlot>(isLeaf: true);

  void alAuxiliaryEffectSloti(
    int effectslot,
    int param,
    int iValue,
  ) {
    return _alAuxiliaryEffectSloti(
      effectslot,
      param,
      iValue,
    );
  }

  late final _alAuxiliaryEffectSlotiPtr =
      _lookup<ffi.NativeFunction<NativeAlAuxiliaryEffectSloti>>(
          'alAuxiliaryEffectSloti');
  late final _alAuxiliaryEffectSloti = _alAuxiliaryEffectSlotiPtr
      .asFunction<DartAlAuxiliaryEffectSloti>(isLeaf: true);

  void alAuxiliaryEffectSlotiv(
    int effectslot,
    int param,
    ffi.Pointer<ALint> piValues,
  ) {
    return _alAuxiliaryEffectSlotiv(
      effectslot,
      param,
      piValues,
    );
  }

  late final _alAuxiliaryEffectSlotivPtr =
      _lookup<ffi.NativeFunction<NativeAlAuxiliaryEffectSlotiv>>(
          'alAuxiliaryEffectSlotiv');
  late final _alAuxiliaryEffectSlotiv = _alAuxiliaryEffectSlotivPtr
      .asFunction<DartAlAuxiliaryEffectSlotiv>(isLeaf: true);

  void alAuxiliaryEffectSlotf(
    int effectslot,
    int param,
    double flValue,
  ) {
    return _alAuxiliaryEffectSlotf(
      effectslot,
      param,
      flValue,
    );
  }

  late final _alAuxiliaryEffectSlotfPtr =
      _lookup<ffi.NativeFunction<NativeAlAuxiliaryEffectSlotf>>(
          'alAuxiliaryEffectSlotf');
  late final _alAuxiliaryEffectSlotf = _alAuxiliaryEffectSlotfPtr
      .asFunction<DartAlAuxiliaryEffectSlotf>(isLeaf: true);

  void alAuxiliaryEffectSlotfv(
    int effectslot,
    int param,
    ffi.Pointer<ALfloat> pflValues,
  ) {
    return _alAuxiliaryEffectSlotfv(
      effectslot,
      param,
      pflValues,
    );
  }

  late final _alAuxiliaryEffectSlotfvPtr =
      _lookup<ffi.NativeFunction<NativeAlAuxiliaryEffectSlotfv>>(
          'alAuxiliaryEffectSlotfv');
  late final _alAuxiliaryEffectSlotfv = _alAuxiliaryEffectSlotfvPtr
      .asFunction<DartAlAuxiliaryEffectSlotfv>(isLeaf: true);

  void alGetAuxiliaryEffectSloti(
    int effectslot,
    int param,
    ffi.Pointer<ALint> piValue,
  ) {
    return _alGetAuxiliaryEffectSloti(
      effectslot,
      param,
      piValue,
    );
  }

  late final _alGetAuxiliaryEffectSlotiPtr =
      _lookup<ffi.NativeFunction<NativeAlGetAuxiliaryEffectSloti>>(
          'alGetAuxiliaryEffectSloti');
  late final _alGetAuxiliaryEffectSloti = _alGetAuxiliaryEffectSlotiPtr
      .asFunction<DartAlGetAuxiliaryEffectSloti>(isLeaf: true);

  void alGetAuxiliaryEffectSlotiv(
    int effectslot,
    int param,
    ffi.Pointer<ALint> piValues,
  ) {
    return _alGetAuxiliaryEffectSlotiv(
      effectslot,
      param,
      piValues,
    );
  }

  late final _alGetAuxiliaryEffectSlotivPtr =
      _lookup<ffi.NativeFunction<NativeAlGetAuxiliaryEffectSlotiv>>(
          'alGetAuxiliaryEffectSlotiv');
  late final _alGetAuxiliaryEffectSlotiv = _alGetAuxiliaryEffectSlotivPtr
      .asFunction<DartAlGetAuxiliaryEffectSlotiv>(isLeaf: true);

  void alGetAuxiliaryEffectSlotf(
    int effectslot,
    int param,
    ffi.Pointer<ALfloat> pflValue,
  ) {
    return _alGetAuxiliaryEffectSlotf(
      effectslot,
      param,
      pflValue,
    );
  }

  late final _alGetAuxiliaryEffectSlotfPtr =
      _lookup<ffi.NativeFunction<NativeAlGetAuxiliaryEffectSlotf>>(
          'alGetAuxiliaryEffectSlotf');
  late final _alGetAuxiliaryEffectSlotf = _alGetAuxiliaryEffectSlotfPtr
      .asFunction<DartAlGetAuxiliaryEffectSlotf>(isLeaf: true);

  void alGetAuxiliaryEffectSlotfv(
    int effectslot,
    int param,
    ffi.Pointer<ALfloat> pflValues,
  ) {
    return _alGetAuxiliaryEffectSlotfv(
      effectslot,
      param,
      pflValues,
    );
  }

  late final _alGetAuxiliaryEffectSlotfvPtr =
      _lookup<ffi.NativeFunction<NativeAlGetAuxiliaryEffectSlotfv>>(
          'alGetAuxiliaryEffectSlotfv');
  late final _alGetAuxiliaryEffectSlotfv = _alGetAuxiliaryEffectSlotfvPtr
      .asFunction<DartAlGetAuxiliaryEffectSlotfv>(isLeaf: true);

  int alcSetThreadContext(
    ffi.Pointer<ALCcontext> context,
  ) {
    return _alcSetThreadContext(
      context,
    );
  }

  late final _alcSetThreadContextPtr =
      _lookup<ffi.NativeFunction<NativeAlcSetThreadContext>>(
          'alcSetThreadContext');
  late final _alcSetThreadContext =
      _alcSetThreadContextPtr.asFunction<DartAlcSetThreadContext>(isLeaf: true);

  ffi.Pointer<ALCcontext> alcGetThreadContext() {
    return _alcGetThreadContext();
  }

  late final _alcGetThreadContextPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetThreadContext>>(
          'alcGetThreadContext');
  late final _alcGetThreadContext =
      _alcGetThreadContextPtr.asFunction<DartAlcGetThreadContext>(isLeaf: true);

  void alBufferSubDataSOFT(
    int buffer,
    int format,
    ffi.Pointer<ALvoid> data,
    int offset,
    int length,
  ) {
    return _alBufferSubDataSOFT(
      buffer,
      format,
      data,
      offset,
      length,
    );
  }

  late final _alBufferSubDataSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferSubDataSOFT>>(
          'alBufferSubDataSOFT');
  late final _alBufferSubDataSOFT =
      _alBufferSubDataSOFTPtr.asFunction<DartAlBufferSubDataSOFT>(isLeaf: true);

  void alRequestFoldbackStart(
    int mode,
    int count,
    int length,
    ffi.Pointer<ALfloat> mem,
    LPALFOLDBACKCALLBACK callback,
  ) {
    return _alRequestFoldbackStart(
      mode,
      count,
      length,
      mem,
      callback,
    );
  }

  late final _alRequestFoldbackStartPtr =
      _lookup<ffi.NativeFunction<NativeAlRequestFoldbackStart>>(
          'alRequestFoldbackStart');
  late final _alRequestFoldbackStart = _alRequestFoldbackStartPtr
      .asFunction<DartAlRequestFoldbackStart>(isLeaf: true);

  void alRequestFoldbackStop() {
    return _alRequestFoldbackStop();
  }

  late final _alRequestFoldbackStopPtr =
      _lookup<ffi.NativeFunction<NativeAlRequestFoldbackStop>>(
          'alRequestFoldbackStop');
  late final _alRequestFoldbackStop = _alRequestFoldbackStopPtr
      .asFunction<DartAlRequestFoldbackStop>(isLeaf: true);

  void alBufferSamplesSOFT(
    int buffer,
    int samplerate,
    int internalformat,
    int samples,
    int channels,
    int type,
    ffi.Pointer<ALvoid> data,
  ) {
    return _alBufferSamplesSOFT(
      buffer,
      samplerate,
      internalformat,
      samples,
      channels,
      type,
      data,
    );
  }

  late final _alBufferSamplesSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferSamplesSOFT>>(
          'alBufferSamplesSOFT');
  late final _alBufferSamplesSOFT =
      _alBufferSamplesSOFTPtr.asFunction<DartAlBufferSamplesSOFT>(isLeaf: true);

  void alBufferSubSamplesSOFT(
    int buffer,
    int offset,
    int samples,
    int channels,
    int type,
    ffi.Pointer<ALvoid> data,
  ) {
    return _alBufferSubSamplesSOFT(
      buffer,
      offset,
      samples,
      channels,
      type,
      data,
    );
  }

  late final _alBufferSubSamplesSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferSubSamplesSOFT>>(
          'alBufferSubSamplesSOFT');
  late final _alBufferSubSamplesSOFT = _alBufferSubSamplesSOFTPtr
      .asFunction<DartAlBufferSubSamplesSOFT>(isLeaf: true);

  void alGetBufferSamplesSOFT(
    int buffer,
    int offset,
    int samples,
    int channels,
    int type,
    ffi.Pointer<ALvoid> data,
  ) {
    return _alGetBufferSamplesSOFT(
      buffer,
      offset,
      samples,
      channels,
      type,
      data,
    );
  }

  late final _alGetBufferSamplesSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBufferSamplesSOFT>>(
          'alGetBufferSamplesSOFT');
  late final _alGetBufferSamplesSOFT = _alGetBufferSamplesSOFTPtr
      .asFunction<DartAlGetBufferSamplesSOFT>(isLeaf: true);

  int alIsBufferFormatSupportedSOFT(
    int format,
  ) {
    return _alIsBufferFormatSupportedSOFT(
      format,
    );
  }

  late final _alIsBufferFormatSupportedSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlIsBufferFormatSupportedSOFT>>(
          'alIsBufferFormatSupportedSOFT');
  late final _alIsBufferFormatSupportedSOFT = _alIsBufferFormatSupportedSOFTPtr
      .asFunction<DartAlIsBufferFormatSupportedSOFT>(isLeaf: true);

  ffi.Pointer<ALCdevice> alcLoopbackOpenDeviceSOFT(
    ffi.Pointer<ALCchar> deviceName,
  ) {
    return _alcLoopbackOpenDeviceSOFT(
      deviceName,
    );
  }

  late final _alcLoopbackOpenDeviceSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcLoopbackOpenDeviceSOFT>>(
          'alcLoopbackOpenDeviceSOFT');
  late final _alcLoopbackOpenDeviceSOFT = _alcLoopbackOpenDeviceSOFTPtr
      .asFunction<DartAlcLoopbackOpenDeviceSOFT>(isLeaf: true);

  int alcIsRenderFormatSupportedSOFT(
    ffi.Pointer<ALCdevice> device,
    int freq,
    int channels,
    int type,
  ) {
    return _alcIsRenderFormatSupportedSOFT(
      device,
      freq,
      channels,
      type,
    );
  }

  late final _alcIsRenderFormatSupportedSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcIsRenderFormatSupportedSOFT>>(
          'alcIsRenderFormatSupportedSOFT');
  late final _alcIsRenderFormatSupportedSOFT =
      _alcIsRenderFormatSupportedSOFTPtr
          .asFunction<DartAlcIsRenderFormatSupportedSOFT>(isLeaf: true);

  void alcRenderSamplesSOFT(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCvoid> buffer,
    int samples,
  ) {
    return _alcRenderSamplesSOFT(
      device,
      buffer,
      samples,
    );
  }

  late final _alcRenderSamplesSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcRenderSamplesSOFT>>(
          'alcRenderSamplesSOFT');
  late final _alcRenderSamplesSOFT = _alcRenderSamplesSOFTPtr
      .asFunction<DartAlcRenderSamplesSOFT>(isLeaf: true);

  void alSourcedSOFT(
    int source,
    int param,
    double value,
  ) {
    return _alSourcedSOFT(
      source,
      param,
      value,
    );
  }

  late final _alSourcedSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcedSOFT>>('alSourcedSOFT');
  late final _alSourcedSOFT =
      _alSourcedSOFTPtr.asFunction<DartAlSourcedSOFT>(isLeaf: true);

  void alSource3dSOFT(
    int source,
    int param,
    double value1,
    double value2,
    double value3,
  ) {
    return _alSource3dSOFT(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alSource3dSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSource3dSOFT>>('alSource3dSOFT');
  late final _alSource3dSOFT =
      _alSource3dSOFTPtr.asFunction<DartAlSource3dSOFT>(isLeaf: true);

  void alSourcedvSOFT(
    int source,
    int param,
    ffi.Pointer<ALdouble> values,
  ) {
    return _alSourcedvSOFT(
      source,
      param,
      values,
    );
  }

  late final _alSourcedvSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcedvSOFT>>('alSourcedvSOFT');
  late final _alSourcedvSOFT =
      _alSourcedvSOFTPtr.asFunction<DartAlSourcedvSOFT>(isLeaf: true);

  void alGetSourcedSOFT(
    int source,
    int param,
    ffi.Pointer<ALdouble> value,
  ) {
    return _alGetSourcedSOFT(
      source,
      param,
      value,
    );
  }

  late final _alGetSourcedSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourcedSOFT>>('alGetSourcedSOFT');
  late final _alGetSourcedSOFT =
      _alGetSourcedSOFTPtr.asFunction<DartAlGetSourcedSOFT>(isLeaf: true);

  void alGetSource3dSOFT(
    int source,
    int param,
    ffi.Pointer<ALdouble> value1,
    ffi.Pointer<ALdouble> value2,
    ffi.Pointer<ALdouble> value3,
  ) {
    return _alGetSource3dSOFT(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetSource3dSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSource3dSOFT>>('alGetSource3dSOFT');
  late final _alGetSource3dSOFT =
      _alGetSource3dSOFTPtr.asFunction<DartAlGetSource3dSOFT>(isLeaf: true);

  void alGetSourcedvSOFT(
    int source,
    int param,
    ffi.Pointer<ALdouble> values,
  ) {
    return _alGetSourcedvSOFT(
      source,
      param,
      values,
    );
  }

  late final _alGetSourcedvSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourcedvSOFT>>('alGetSourcedvSOFT');
  late final _alGetSourcedvSOFT =
      _alGetSourcedvSOFTPtr.asFunction<DartAlGetSourcedvSOFT>(isLeaf: true);

  void alSourcei64SOFT(
    int source,
    int param,
    int value,
  ) {
    return _alSourcei64SOFT(
      source,
      param,
      value,
    );
  }

  late final _alSourcei64SOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcei64SOFT>>('alSourcei64SOFT');
  late final _alSourcei64SOFT =
      _alSourcei64SOFTPtr.asFunction<DartAlSourcei64SOFT>(isLeaf: true);

  void alSource3i64SOFT(
    int source,
    int param,
    int value1,
    int value2,
    int value3,
  ) {
    return _alSource3i64SOFT(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alSource3i64SOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSource3i64SOFT>>('alSource3i64SOFT');
  late final _alSource3i64SOFT =
      _alSource3i64SOFTPtr.asFunction<DartAlSource3i64SOFT>(isLeaf: true);

  void alSourcei64vSOFT(
    int source,
    int param,
    ffi.Pointer<ALint64SOFT> values,
  ) {
    return _alSourcei64vSOFT(
      source,
      param,
      values,
    );
  }

  late final _alSourcei64vSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcei64vSOFT>>('alSourcei64vSOFT');
  late final _alSourcei64vSOFT =
      _alSourcei64vSOFTPtr.asFunction<DartAlSourcei64vSOFT>(isLeaf: true);

  void alGetSourcei64SOFT(
    int source,
    int param,
    ffi.Pointer<ALint64SOFT> value,
  ) {
    return _alGetSourcei64SOFT(
      source,
      param,
      value,
    );
  }

  late final _alGetSourcei64SOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourcei64SOFT>>(
          'alGetSourcei64SOFT');
  late final _alGetSourcei64SOFT =
      _alGetSourcei64SOFTPtr.asFunction<DartAlGetSourcei64SOFT>(isLeaf: true);

  void alGetSource3i64SOFT(
    int source,
    int param,
    ffi.Pointer<ALint64SOFT> value1,
    ffi.Pointer<ALint64SOFT> value2,
    ffi.Pointer<ALint64SOFT> value3,
  ) {
    return _alGetSource3i64SOFT(
      source,
      param,
      value1,
      value2,
      value3,
    );
  }

  late final _alGetSource3i64SOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSource3i64SOFT>>(
          'alGetSource3i64SOFT');
  late final _alGetSource3i64SOFT =
      _alGetSource3i64SOFTPtr.asFunction<DartAlGetSource3i64SOFT>(isLeaf: true);

  void alGetSourcei64vSOFT(
    int source,
    int param,
    ffi.Pointer<ALint64SOFT> values,
  ) {
    return _alGetSourcei64vSOFT(
      source,
      param,
      values,
    );
  }

  late final _alGetSourcei64vSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetSourcei64vSOFT>>(
          'alGetSourcei64vSOFT');
  late final _alGetSourcei64vSOFT =
      _alGetSourcei64vSOFTPtr.asFunction<DartAlGetSourcei64vSOFT>(isLeaf: true);

  void alDeferUpdatesSOFT() {
    return _alDeferUpdatesSOFT();
  }

  late final _alDeferUpdatesSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlDeferUpdatesSOFT>>(
          'alDeferUpdatesSOFT');
  late final _alDeferUpdatesSOFT =
      _alDeferUpdatesSOFTPtr.asFunction<DartAlDeferUpdatesSOFT>(isLeaf: true);

  void alProcessUpdatesSOFT() {
    return _alProcessUpdatesSOFT();
  }

  late final _alProcessUpdatesSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlProcessUpdatesSOFT>>(
          'alProcessUpdatesSOFT');
  late final _alProcessUpdatesSOFT = _alProcessUpdatesSOFTPtr
      .asFunction<DartAlProcessUpdatesSOFT>(isLeaf: true);

  void alcDevicePauseSOFT(
    ffi.Pointer<ALCdevice> device,
  ) {
    return _alcDevicePauseSOFT(
      device,
    );
  }

  late final _alcDevicePauseSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcDevicePauseSOFT>>(
          'alcDevicePauseSOFT');
  late final _alcDevicePauseSOFT =
      _alcDevicePauseSOFTPtr.asFunction<DartAlcDevicePauseSOFT>(isLeaf: true);

  void alcDeviceResumeSOFT(
    ffi.Pointer<ALCdevice> device,
  ) {
    return _alcDeviceResumeSOFT(
      device,
    );
  }

  late final _alcDeviceResumeSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcDeviceResumeSOFT>>(
          'alcDeviceResumeSOFT');
  late final _alcDeviceResumeSOFT =
      _alcDeviceResumeSOFTPtr.asFunction<DartAlcDeviceResumeSOFT>(isLeaf: true);

  ffi.Pointer<ALCchar> alcGetStringiSOFT(
    ffi.Pointer<ALCdevice> device,
    int paramName,
    int index,
  ) {
    return _alcGetStringiSOFT(
      device,
      paramName,
      index,
    );
  }

  late final _alcGetStringiSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetStringiSOFT>>('alcGetStringiSOFT');
  late final _alcGetStringiSOFT =
      _alcGetStringiSOFTPtr.asFunction<DartAlcGetStringiSOFT>(isLeaf: true);

  int alcResetDeviceSOFT(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCint> attribs,
  ) {
    return _alcResetDeviceSOFT(
      device,
      attribs,
    );
  }

  late final _alcResetDeviceSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcResetDeviceSOFT>>(
          'alcResetDeviceSOFT');
  late final _alcResetDeviceSOFT =
      _alcResetDeviceSOFTPtr.asFunction<DartAlcResetDeviceSOFT>(isLeaf: true);

  ffi.Pointer<ALchar> alGetStringiSOFT(
    int pname,
    int index,
  ) {
    return _alGetStringiSOFT(
      pname,
      index,
    );
  }

  late final _alGetStringiSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetStringiSOFT>>('alGetStringiSOFT');
  late final _alGetStringiSOFT =
      _alGetStringiSOFTPtr.asFunction<DartAlGetStringiSOFT>(isLeaf: true);

  void alcGetInteger64vSOFT(
    ffi.Pointer<ALCdevice> device,
    int pname,
    int size,
    ffi.Pointer<ALCint64SOFT> values,
  ) {
    return _alcGetInteger64vSOFT(
      device,
      pname,
      size,
      values,
    );
  }

  late final _alcGetInteger64vSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcGetInteger64vSOFT>>(
          'alcGetInteger64vSOFT');
  late final _alcGetInteger64vSOFT = _alcGetInteger64vSOFTPtr
      .asFunction<DartAlcGetInteger64vSOFT>(isLeaf: true);

  void alEventControlSOFT(
    int count,
    ffi.Pointer<ALenum> types,
    int enable,
  ) {
    return _alEventControlSOFT(
      count,
      types,
      enable,
    );
  }

  late final _alEventControlSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlEventControlSOFT>>(
          'alEventControlSOFT');
  late final _alEventControlSOFT =
      _alEventControlSOFTPtr.asFunction<DartAlEventControlSOFT>(isLeaf: true);

  void alEventCallbackSOFT(
    ALEVENTPROCSOFT callback,
    ffi.Pointer<ffi.Void> userParam,
  ) {
    return _alEventCallbackSOFT(
      callback,
      userParam,
    );
  }

  late final _alEventCallbackSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlEventCallbackSOFT>>(
          'alEventCallbackSOFT');
  late final _alEventCallbackSOFT =
      _alEventCallbackSOFTPtr.asFunction<DartAlEventCallbackSOFT>(isLeaf: true);

  ffi.Pointer<ffi.Void> alGetPointerSOFT(
    int pname,
  ) {
    return _alGetPointerSOFT(
      pname,
    );
  }

  late final _alGetPointerSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetPointerSOFT>>('alGetPointerSOFT');
  late final _alGetPointerSOFT =
      _alGetPointerSOFTPtr.asFunction<DartAlGetPointerSOFT>(isLeaf: true);

  void alGetPointervSOFT(
    int pname,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _alGetPointervSOFT(
      pname,
      values,
    );
  }

  late final _alGetPointervSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetPointervSOFT>>('alGetPointervSOFT');
  late final _alGetPointervSOFT =
      _alGetPointervSOFTPtr.asFunction<DartAlGetPointervSOFT>(isLeaf: true);

  int alcReopenDeviceSOFT(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCchar> deviceName,
    ffi.Pointer<ALCint> attribs,
  ) {
    return _alcReopenDeviceSOFT(
      device,
      deviceName,
      attribs,
    );
  }

  late final _alcReopenDeviceSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcReopenDeviceSOFT>>(
          'alcReopenDeviceSOFT');
  late final _alcReopenDeviceSOFT =
      _alcReopenDeviceSOFTPtr.asFunction<DartAlcReopenDeviceSOFT>(isLeaf: true);

  void alBufferCallbackSOFT(
    int buffer,
    int format,
    int freq,
    ALBUFFERCALLBACKTYPESOFT callback,
    ffi.Pointer<ALvoid> userptr,
  ) {
    return _alBufferCallbackSOFT(
      buffer,
      format,
      freq,
      callback,
      userptr,
    );
  }

  late final _alBufferCallbackSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlBufferCallbackSOFT>>(
          'alBufferCallbackSOFT');
  late final _alBufferCallbackSOFT = _alBufferCallbackSOFTPtr
      .asFunction<DartAlBufferCallbackSOFT>(isLeaf: true);

  void alGetBufferPtrSOFT(
    int buffer,
    int param,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr,
  ) {
    return _alGetBufferPtrSOFT(
      buffer,
      param,
      ptr,
    );
  }

  late final _alGetBufferPtrSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBufferPtrSOFT>>(
          'alGetBufferPtrSOFT');
  late final _alGetBufferPtrSOFT =
      _alGetBufferPtrSOFTPtr.asFunction<DartAlGetBufferPtrSOFT>(isLeaf: true);

  void alGetBuffer3PtrSOFT(
    int buffer,
    int param,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr0,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr1,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr2,
  ) {
    return _alGetBuffer3PtrSOFT(
      buffer,
      param,
      ptr0,
      ptr1,
      ptr2,
    );
  }

  late final _alGetBuffer3PtrSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBuffer3PtrSOFT>>(
          'alGetBuffer3PtrSOFT');
  late final _alGetBuffer3PtrSOFT =
      _alGetBuffer3PtrSOFTPtr.asFunction<DartAlGetBuffer3PtrSOFT>(isLeaf: true);

  void alGetBufferPtrvSOFT(
    int buffer,
    int param,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr,
  ) {
    return _alGetBufferPtrvSOFT(
      buffer,
      param,
      ptr,
    );
  }

  late final _alGetBufferPtrvSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetBufferPtrvSOFT>>(
          'alGetBufferPtrvSOFT');
  late final _alGetBufferPtrvSOFT =
      _alGetBufferPtrvSOFTPtr.asFunction<DartAlGetBufferPtrvSOFT>(isLeaf: true);

  void alSourcePlayAtTimeSOFT(
    int source,
    int start_time,
  ) {
    return _alSourcePlayAtTimeSOFT(
      source,
      start_time,
    );
  }

  late final _alSourcePlayAtTimeSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcePlayAtTimeSOFT>>(
          'alSourcePlayAtTimeSOFT');
  late final _alSourcePlayAtTimeSOFT = _alSourcePlayAtTimeSOFTPtr
      .asFunction<DartAlSourcePlayAtTimeSOFT>(isLeaf: true);

  void alSourcePlayAtTimevSOFT(
    int n,
    ffi.Pointer<ALuint> sources,
    int start_time,
  ) {
    return _alSourcePlayAtTimevSOFT(
      n,
      sources,
      start_time,
    );
  }

  late final _alSourcePlayAtTimevSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlSourcePlayAtTimevSOFT>>(
          'alSourcePlayAtTimevSOFT');
  late final _alSourcePlayAtTimevSOFT = _alSourcePlayAtTimevSOFTPtr
      .asFunction<DartAlSourcePlayAtTimevSOFT>(isLeaf: true);

  void alDebugMessageCallbackEXT(
    ALDEBUGPROCEXT callback,
    ffi.Pointer<ffi.Void> userParam,
  ) {
    return _alDebugMessageCallbackEXT(
      callback,
      userParam,
    );
  }

  late final _alDebugMessageCallbackEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlDebugMessageCallbackEXT>>(
          'alDebugMessageCallbackEXT');
  late final _alDebugMessageCallbackEXT = _alDebugMessageCallbackEXTPtr
      .asFunction<DartAlDebugMessageCallbackEXT>(isLeaf: true);

  void alDebugMessageInsertEXT(
    int source,
    int type,
    int id,
    int severity,
    int length,
    ffi.Pointer<ALchar> message,
  ) {
    return _alDebugMessageInsertEXT(
      source,
      type,
      id,
      severity,
      length,
      message,
    );
  }

  late final _alDebugMessageInsertEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlDebugMessageInsertEXT>>(
          'alDebugMessageInsertEXT');
  late final _alDebugMessageInsertEXT = _alDebugMessageInsertEXTPtr
      .asFunction<DartAlDebugMessageInsertEXT>(isLeaf: true);

  void alDebugMessageControlEXT(
    int source,
    int type,
    int severity,
    int count,
    ffi.Pointer<ALuint> ids,
    int enable,
  ) {
    return _alDebugMessageControlEXT(
      source,
      type,
      severity,
      count,
      ids,
      enable,
    );
  }

  late final _alDebugMessageControlEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlDebugMessageControlEXT>>(
          'alDebugMessageControlEXT');
  late final _alDebugMessageControlEXT = _alDebugMessageControlEXTPtr
      .asFunction<DartAlDebugMessageControlEXT>(isLeaf: true);

  void alPushDebugGroupEXT(
    int source,
    int id,
    int length,
    ffi.Pointer<ALchar> message,
  ) {
    return _alPushDebugGroupEXT(
      source,
      id,
      length,
      message,
    );
  }

  late final _alPushDebugGroupEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlPushDebugGroupEXT>>(
          'alPushDebugGroupEXT');
  late final _alPushDebugGroupEXT =
      _alPushDebugGroupEXTPtr.asFunction<DartAlPushDebugGroupEXT>(isLeaf: true);

  void alPopDebugGroupEXT() {
    return _alPopDebugGroupEXT();
  }

  late final _alPopDebugGroupEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlPopDebugGroupEXT>>(
          'alPopDebugGroupEXT');
  late final _alPopDebugGroupEXT =
      _alPopDebugGroupEXTPtr.asFunction<DartAlPopDebugGroupEXT>(isLeaf: true);

  int alGetDebugMessageLogEXT(
    int count,
    int logBufSize,
    ffi.Pointer<ALenum> sources,
    ffi.Pointer<ALenum> types,
    ffi.Pointer<ALuint> ids,
    ffi.Pointer<ALenum> severities,
    ffi.Pointer<ALsizei> lengths,
    ffi.Pointer<ALchar> logBuf,
  ) {
    return _alGetDebugMessageLogEXT(
      count,
      logBufSize,
      sources,
      types,
      ids,
      severities,
      lengths,
      logBuf,
    );
  }

  late final _alGetDebugMessageLogEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetDebugMessageLogEXT>>(
          'alGetDebugMessageLogEXT');
  late final _alGetDebugMessageLogEXT = _alGetDebugMessageLogEXTPtr
      .asFunction<DartAlGetDebugMessageLogEXT>(isLeaf: true);

  void alObjectLabelEXT(
    int identifier,
    int name,
    int length,
    ffi.Pointer<ALchar> label,
  ) {
    return _alObjectLabelEXT(
      identifier,
      name,
      length,
      label,
    );
  }

  late final _alObjectLabelEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlObjectLabelEXT>>('alObjectLabelEXT');
  late final _alObjectLabelEXT =
      _alObjectLabelEXTPtr.asFunction<DartAlObjectLabelEXT>(isLeaf: true);

  void alGetObjectLabelEXT(
    int identifier,
    int name,
    int bufSize,
    ffi.Pointer<ALsizei> length,
    ffi.Pointer<ALchar> label,
  ) {
    return _alGetObjectLabelEXT(
      identifier,
      name,
      bufSize,
      length,
      label,
    );
  }

  late final _alGetObjectLabelEXTPtr =
      _lookup<ffi.NativeFunction<NativeAlGetObjectLabelEXT>>(
          'alGetObjectLabelEXT');
  late final _alGetObjectLabelEXT =
      _alGetObjectLabelEXTPtr.asFunction<DartAlGetObjectLabelEXT>(isLeaf: true);

  int alcEventControlSOFT(
    int count,
    ffi.Pointer<ALCenum> events,
    int enable,
  ) {
    return _alcEventControlSOFT(
      count,
      events,
      enable,
    );
  }

  late final _alcEventControlSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcEventControlSOFT>>(
          'alcEventControlSOFT');
  late final _alcEventControlSOFT =
      _alcEventControlSOFTPtr.asFunction<DartAlcEventControlSOFT>(isLeaf: true);

  void alcEventCallbackSOFT(
    ALCEVENTPROCTYPESOFT callback,
    ffi.Pointer<ffi.Void> userParam,
  ) {
    return _alcEventCallbackSOFT(
      callback,
      userParam,
    );
  }

  late final _alcEventCallbackSOFTPtr =
      _lookup<ffi.NativeFunction<NativeAlcEventCallbackSOFT>>(
          'alcEventCallbackSOFT');
  late final _alcEventCallbackSOFT = _alcEventCallbackSOFTPtr
      .asFunction<DartAlcEventCallbackSOFT>(isLeaf: true);
}

/// 32-bit enumeration value
typedef ALenum = ffi.Int;
typedef DartALenum = int;
typedef NativeAlEnable = ffi.Void Function(ALenum capability);
typedef DartAlEnable = void Function(int capability);
typedef NativeAlDisable = ffi.Void Function(ALenum capability);
typedef DartAlDisable = void Function(int capability);

/// 8-bit boolean
typedef ALboolean = ffi.Char;
typedef DartALboolean = int;
typedef NativeAlIsEnabled = ALboolean Function(ALenum capability);
typedef DartAlIsEnabled = int Function(int capability);

/// 32-bit IEEE-754 floating-point
typedef ALfloat = ffi.Float;
typedef DartALfloat = double;
typedef NativeAlDopplerFactor = ffi.Void Function(ALfloat value);
typedef DartAlDopplerFactor = void Function(double value);
typedef NativeAlDopplerVelocity = ffi.Void Function(ALfloat value);
typedef DartAlDopplerVelocity = void Function(double value);
typedef NativeAlSpeedOfSound = ffi.Void Function(ALfloat value);
typedef DartAlSpeedOfSound = void Function(double value);
typedef NativeAlDistanceModel = ffi.Void Function(ALenum distanceModel);
typedef DartAlDistanceModel = void Function(int distanceModel);

/// character
typedef ALchar = ffi.Char;
typedef DartALchar = int;
typedef NativeAlGetString = ffi.Pointer<ALchar> Function(ALenum param);
typedef DartAlGetString = ffi.Pointer<ALchar> Function(int param);
typedef NativeAlGetBooleanv = ffi.Void Function(
    ALenum param, ffi.Pointer<ALboolean> values);
typedef DartAlGetBooleanv = void Function(
    int param, ffi.Pointer<ALboolean> values);

/// signed 32-bit integer
typedef ALint = ffi.Int;
typedef DartALint = int;
typedef NativeAlGetIntegerv = ffi.Void Function(
    ALenum param, ffi.Pointer<ALint> values);
typedef DartAlGetIntegerv = void Function(int param, ffi.Pointer<ALint> values);
typedef NativeAlGetFloatv = ffi.Void Function(
    ALenum param, ffi.Pointer<ALfloat> values);
typedef DartAlGetFloatv = void Function(int param, ffi.Pointer<ALfloat> values);

/// 64-bit IEEE-754 floating-point
typedef ALdouble = ffi.Double;
typedef DartALdouble = double;
typedef NativeAlGetDoublev = ffi.Void Function(
    ALenum param, ffi.Pointer<ALdouble> values);
typedef DartAlGetDoublev = void Function(
    int param, ffi.Pointer<ALdouble> values);
typedef NativeAlGetBoolean = ALboolean Function(ALenum param);
typedef DartAlGetBoolean = int Function(int param);
typedef NativeAlGetInteger = ALint Function(ALenum param);
typedef DartAlGetInteger = int Function(int param);
typedef NativeAlGetFloat = ALfloat Function(ALenum param);
typedef DartAlGetFloat = double Function(int param);
typedef NativeAlGetDouble = ALdouble Function(ALenum param);
typedef DartAlGetDouble = double Function(int param);
typedef NativeAlGetError = ALenum Function();
typedef DartAlGetError = int Function();
typedef NativeAlIsExtensionPresent = ALboolean Function(
    ffi.Pointer<ALchar> extname);
typedef DartAlIsExtensionPresent = int Function(ffi.Pointer<ALchar> extname);
typedef NativeAlGetProcAddress = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ALchar> fname);
typedef DartAlGetProcAddress = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ALchar> fname);
typedef NativeAlGetEnumValue = ALenum Function(ffi.Pointer<ALchar> ename);
typedef DartAlGetEnumValue = int Function(ffi.Pointer<ALchar> ename);
typedef NativeAlListenerf = ffi.Void Function(ALenum param, ALfloat value);
typedef DartAlListenerf = void Function(int param, double value);
typedef NativeAlListener3f = ffi.Void Function(
    ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);
typedef DartAlListener3f = void Function(
    int param, double value1, double value2, double value3);
typedef NativeAlListenerfv = ffi.Void Function(
    ALenum param, ffi.Pointer<ALfloat> values);
typedef DartAlListenerfv = void Function(
    int param, ffi.Pointer<ALfloat> values);
typedef NativeAlListeneri = ffi.Void Function(ALenum param, ALint value);
typedef DartAlListeneri = void Function(int param, int value);
typedef NativeAlListener3i = ffi.Void Function(
    ALenum param, ALint value1, ALint value2, ALint value3);
typedef DartAlListener3i = void Function(
    int param, int value1, int value2, int value3);
typedef NativeAlListeneriv = ffi.Void Function(
    ALenum param, ffi.Pointer<ALint> values);
typedef DartAlListeneriv = void Function(int param, ffi.Pointer<ALint> values);
typedef NativeAlGetListenerf = ffi.Void Function(
    ALenum param, ffi.Pointer<ALfloat> value);
typedef DartAlGetListenerf = void Function(
    int param, ffi.Pointer<ALfloat> value);
typedef NativeAlGetListener3f = ffi.Void Function(
    ALenum param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3);
typedef DartAlGetListener3f = void Function(
    int param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3);
typedef NativeAlGetListenerfv = ffi.Void Function(
    ALenum param, ffi.Pointer<ALfloat> values);
typedef DartAlGetListenerfv = void Function(
    int param, ffi.Pointer<ALfloat> values);
typedef NativeAlGetListeneri = ffi.Void Function(
    ALenum param, ffi.Pointer<ALint> value);
typedef DartAlGetListeneri = void Function(int param, ffi.Pointer<ALint> value);
typedef NativeAlGetListener3i = ffi.Void Function(
    ALenum param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3);
typedef DartAlGetListener3i = void Function(
    int param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3);
typedef NativeAlGetListeneriv = ffi.Void Function(
    ALenum param, ffi.Pointer<ALint> values);
typedef DartAlGetListeneriv = void Function(
    int param, ffi.Pointer<ALint> values);

/// non-negative 32-bit integer size
typedef ALsizei = ffi.Int;
typedef DartALsizei = int;

/// unsigned 32-bit integer
typedef ALuint = ffi.UnsignedInt;
typedef DartALuint = int;
typedef NativeAlGenSources = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> sources);
typedef DartAlGenSources = void Function(int n, ffi.Pointer<ALuint> sources);
typedef NativeAlDeleteSources = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> sources);
typedef DartAlDeleteSources = void Function(int n, ffi.Pointer<ALuint> sources);
typedef NativeAlIsSource = ALboolean Function(ALuint source);
typedef DartAlIsSource = int Function(int source);
typedef NativeAlSourcef = ffi.Void Function(
    ALuint source, ALenum param, ALfloat value);
typedef DartAlSourcef = void Function(int source, int param, double value);
typedef NativeAlSource3f = ffi.Void Function(ALuint source, ALenum param,
    ALfloat value1, ALfloat value2, ALfloat value3);
typedef DartAlSource3f = void Function(
    int source, int param, double value1, double value2, double value3);
typedef NativeAlSourcefv = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALfloat> values);
typedef DartAlSourcefv = void Function(
    int source, int param, ffi.Pointer<ALfloat> values);
typedef NativeAlSourcei = ffi.Void Function(
    ALuint source, ALenum param, ALint value);
typedef DartAlSourcei = void Function(int source, int param, int value);
typedef NativeAlSource3i = ffi.Void Function(
    ALuint source, ALenum param, ALint value1, ALint value2, ALint value3);
typedef DartAlSource3i = void Function(
    int source, int param, int value1, int value2, int value3);
typedef NativeAlSourceiv = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALint> values);
typedef DartAlSourceiv = void Function(
    int source, int param, ffi.Pointer<ALint> values);
typedef NativeAlGetSourcef = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALfloat> value);
typedef DartAlGetSourcef = void Function(
    int source, int param, ffi.Pointer<ALfloat> value);
typedef NativeAlGetSource3f = ffi.Void Function(
    ALuint source,
    ALenum param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3);
typedef DartAlGetSource3f = void Function(
    int source,
    int param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3);
typedef NativeAlGetSourcefv = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALfloat> values);
typedef DartAlGetSourcefv = void Function(
    int source, int param, ffi.Pointer<ALfloat> values);
typedef NativeAlGetSourcei = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALint> value);
typedef DartAlGetSourcei = void Function(
    int source, int param, ffi.Pointer<ALint> value);
typedef NativeAlGetSource3i = ffi.Void Function(
    ALuint source,
    ALenum param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3);
typedef DartAlGetSource3i = void Function(
    int source,
    int param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3);
typedef NativeAlGetSourceiv = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALint> values);
typedef DartAlGetSourceiv = void Function(
    int source, int param, ffi.Pointer<ALint> values);
typedef NativeAlSourcePlay = ffi.Void Function(ALuint source);
typedef DartAlSourcePlay = void Function(int source);
typedef NativeAlSourceStop = ffi.Void Function(ALuint source);
typedef DartAlSourceStop = void Function(int source);
typedef NativeAlSourceRewind = ffi.Void Function(ALuint source);
typedef DartAlSourceRewind = void Function(int source);
typedef NativeAlSourcePause = ffi.Void Function(ALuint source);
typedef DartAlSourcePause = void Function(int source);
typedef NativeAlSourcePlayv = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> sources);
typedef DartAlSourcePlayv = void Function(int n, ffi.Pointer<ALuint> sources);
typedef NativeAlSourceStopv = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> sources);
typedef DartAlSourceStopv = void Function(int n, ffi.Pointer<ALuint> sources);
typedef NativeAlSourceRewindv = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> sources);
typedef DartAlSourceRewindv = void Function(int n, ffi.Pointer<ALuint> sources);
typedef NativeAlSourcePausev = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> sources);
typedef DartAlSourcePausev = void Function(int n, ffi.Pointer<ALuint> sources);
typedef NativeAlSourceQueueBuffers = ffi.Void Function(
    ALuint source, ALsizei nb, ffi.Pointer<ALuint> buffers);
typedef DartAlSourceQueueBuffers = void Function(
    int source, int nb, ffi.Pointer<ALuint> buffers);
typedef NativeAlSourceUnqueueBuffers = ffi.Void Function(
    ALuint source, ALsizei nb, ffi.Pointer<ALuint> buffers);
typedef DartAlSourceUnqueueBuffers = void Function(
    int source, int nb, ffi.Pointer<ALuint> buffers);
typedef NativeAlGenBuffers = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> buffers);
typedef DartAlGenBuffers = void Function(int n, ffi.Pointer<ALuint> buffers);
typedef NativeAlDeleteBuffers = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> buffers);
typedef DartAlDeleteBuffers = void Function(int n, ffi.Pointer<ALuint> buffers);
typedef NativeAlIsBuffer = ALboolean Function(ALuint buffer);
typedef DartAlIsBuffer = int Function(int buffer);

/// void type (opaque pointers only)
typedef ALvoid = ffi.Void;
typedef DartALvoid = void;
typedef NativeAlBufferData = ffi.Void Function(ALuint buffer, ALenum format,
    ffi.Pointer<ALvoid> data, ALsizei size, ALsizei samplerate);
typedef DartAlBufferData = void Function(
    int buffer, int format, ffi.Pointer<ALvoid> data, int size, int samplerate);
typedef NativeAlBufferf = ffi.Void Function(
    ALuint buffer, ALenum param, ALfloat value);
typedef DartAlBufferf = void Function(int buffer, int param, double value);
typedef NativeAlBuffer3f = ffi.Void Function(ALuint buffer, ALenum param,
    ALfloat value1, ALfloat value2, ALfloat value3);
typedef DartAlBuffer3f = void Function(
    int buffer, int param, double value1, double value2, double value3);
typedef NativeAlBufferfv = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ALfloat> values);
typedef DartAlBufferfv = void Function(
    int buffer, int param, ffi.Pointer<ALfloat> values);
typedef NativeAlBufferi = ffi.Void Function(
    ALuint buffer, ALenum param, ALint value);
typedef DartAlBufferi = void Function(int buffer, int param, int value);
typedef NativeAlBuffer3i = ffi.Void Function(
    ALuint buffer, ALenum param, ALint value1, ALint value2, ALint value3);
typedef DartAlBuffer3i = void Function(
    int buffer, int param, int value1, int value2, int value3);
typedef NativeAlBufferiv = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ALint> values);
typedef DartAlBufferiv = void Function(
    int buffer, int param, ffi.Pointer<ALint> values);
typedef NativeAlGetBufferf = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ALfloat> value);
typedef DartAlGetBufferf = void Function(
    int buffer, int param, ffi.Pointer<ALfloat> value);
typedef NativeAlGetBuffer3f = ffi.Void Function(
    ALuint buffer,
    ALenum param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3);
typedef DartAlGetBuffer3f = void Function(
    int buffer,
    int param,
    ffi.Pointer<ALfloat> value1,
    ffi.Pointer<ALfloat> value2,
    ffi.Pointer<ALfloat> value3);
typedef NativeAlGetBufferfv = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ALfloat> values);
typedef DartAlGetBufferfv = void Function(
    int buffer, int param, ffi.Pointer<ALfloat> values);
typedef NativeAlGetBufferi = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ALint> value);
typedef DartAlGetBufferi = void Function(
    int buffer, int param, ffi.Pointer<ALint> value);
typedef NativeAlGetBuffer3i = ffi.Void Function(
    ALuint buffer,
    ALenum param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3);
typedef DartAlGetBuffer3i = void Function(
    int buffer,
    int param,
    ffi.Pointer<ALint> value1,
    ffi.Pointer<ALint> value2,
    ffi.Pointer<ALint> value3);
typedef NativeAlGetBufferiv = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ALint> values);
typedef DartAlGetBufferiv = void Function(
    int buffer, int param, ffi.Pointer<ALint> values);

final class ALCdevice extends ffi.Opaque {}

final class ALCcontext extends ffi.Opaque {}

/// signed 32-bit integer
typedef ALCint = ffi.Int;
typedef DartALCint = int;
typedef NativeAlcCreateContext = ffi.Pointer<ALCcontext> Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCint> attrlist);
typedef DartAlcCreateContext = ffi.Pointer<ALCcontext> Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCint> attrlist);

/// 8-bit boolean
typedef ALCboolean = ffi.Char;
typedef DartALCboolean = int;
typedef NativeAlcMakeContextCurrent = ALCboolean Function(
    ffi.Pointer<ALCcontext> context);
typedef DartAlcMakeContextCurrent = int Function(
    ffi.Pointer<ALCcontext> context);
typedef NativeAlcProcessContext = ffi.Void Function(
    ffi.Pointer<ALCcontext> context);
typedef DartAlcProcessContext = void Function(ffi.Pointer<ALCcontext> context);
typedef NativeAlcSuspendContext = ffi.Void Function(
    ffi.Pointer<ALCcontext> context);
typedef DartAlcSuspendContext = void Function(ffi.Pointer<ALCcontext> context);
typedef NativeAlcDestroyContext = ffi.Void Function(
    ffi.Pointer<ALCcontext> context);
typedef DartAlcDestroyContext = void Function(ffi.Pointer<ALCcontext> context);
typedef NativeAlcGetCurrentContext = ffi.Pointer<ALCcontext> Function();
typedef DartAlcGetCurrentContext = ffi.Pointer<ALCcontext> Function();
typedef NativeAlcGetContextsDevice = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCcontext> context);
typedef DartAlcGetContextsDevice = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCcontext> context);

/// character
typedef ALCchar = ffi.Char;
typedef DartALCchar = int;
typedef NativeAlcOpenDevice = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCchar> devicename);
typedef DartAlcOpenDevice = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCchar> devicename);
typedef NativeAlcCloseDevice = ALCboolean Function(
    ffi.Pointer<ALCdevice> device);
typedef DartAlcCloseDevice = int Function(ffi.Pointer<ALCdevice> device);

/// 32-bit enumeration value
typedef ALCenum = ffi.Int;
typedef DartALCenum = int;
typedef NativeAlcGetError = ALCenum Function(ffi.Pointer<ALCdevice> device);
typedef DartAlcGetError = int Function(ffi.Pointer<ALCdevice> device);
typedef NativeAlcIsExtensionPresent = ALCboolean Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCchar> extname);
typedef DartAlcIsExtensionPresent = int Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCchar> extname);

/// void type (for opaque pointers only)
typedef ALCvoid = ffi.Void;
typedef DartALCvoid = void;
typedef NativeAlcGetProcAddress = ffi.Pointer<ALCvoid> Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCchar> funcname);
typedef DartAlcGetProcAddress = ffi.Pointer<ALCvoid> Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCchar> funcname);
typedef NativeAlcGetEnumValue = ALCenum Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCchar> enumname);
typedef DartAlcGetEnumValue = int Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCchar> enumname);
typedef NativeAlcGetString = ffi.Pointer<ALCchar> Function(
    ffi.Pointer<ALCdevice> device, ALCenum param);
typedef DartAlcGetString = ffi.Pointer<ALCchar> Function(
    ffi.Pointer<ALCdevice> device, int param);

/// non-negative 32-bit integer size
typedef ALCsizei = ffi.Int;
typedef DartALCsizei = int;
typedef NativeAlcGetIntegerv = ffi.Void Function(ffi.Pointer<ALCdevice> device,
    ALCenum param, ALCsizei size, ffi.Pointer<ALCint> values);
typedef DartAlcGetIntegerv = void Function(ffi.Pointer<ALCdevice> device,
    int param, int size, ffi.Pointer<ALCint> values);

/// unsigned 32-bit integer
typedef ALCuint = ffi.UnsignedInt;
typedef DartALCuint = int;
typedef NativeAlcCaptureOpenDevice = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCchar> devicename,
    ALCuint frequency,
    ALCenum format,
    ALCsizei buffersize);
typedef DartAlcCaptureOpenDevice = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCchar> devicename, int frequency, int format, int buffersize);
typedef NativeAlcCaptureCloseDevice = ALCboolean Function(
    ffi.Pointer<ALCdevice> device);
typedef DartAlcCaptureCloseDevice = int Function(ffi.Pointer<ALCdevice> device);
typedef NativeAlcCaptureStart = ffi.Void Function(
    ffi.Pointer<ALCdevice> device);
typedef DartAlcCaptureStart = void Function(ffi.Pointer<ALCdevice> device);
typedef NativeAlcCaptureStop = ffi.Void Function(ffi.Pointer<ALCdevice> device);
typedef DartAlcCaptureStop = void Function(ffi.Pointer<ALCdevice> device);
typedef NativeAlcCaptureSamples = ffi.Void Function(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCvoid> buffer,
    ALCsizei samples);
typedef DartAlcCaptureSamples = void Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCvoid> buffer, int samples);
typedef va_list = ffi.Pointer<ffi.Char>;
typedef Native__va_start = ffi.Void Function(ffi.Pointer<va_list> arg0);
typedef Dart__va_start = void Function(ffi.Pointer<va_list> arg0);
typedef Native__security_init_cookie = ffi.Void Function();
typedef Dart__security_init_cookie = void Function();
typedef Native__security_check_cookie = ffi.Void Function(
    ffi.UintPtr _StackCookie);
typedef Dart__security_check_cookie = void Function(int _StackCookie);
typedef Native__report_gsfailure = ffi.Void Function(ffi.UintPtr _StackCookie);
typedef Dart__report_gsfailure = void Function(int _StackCookie);
typedef Native_invalid_parameter_noinfo = ffi.Void Function();
typedef Dart_invalid_parameter_noinfo = void Function();
typedef Native_invalid_parameter_noinfo_noreturn = ffi.Void Function();
typedef Dart_invalid_parameter_noinfo_noreturn = void Function();
typedef Native_invoke_watson = ffi.Void Function(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.UnsignedInt _LineNo,
    ffi.UintPtr _Reserved);
typedef Dart_invoke_watson = void Function(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved);

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

typedef Native_errno = ffi.Pointer<ffi.Int> Function();
typedef Dart_errno = ffi.Pointer<ffi.Int> Function();
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef Native_set_errno = errno_t Function(ffi.Int _Value);
typedef Dart_set_errno = int Function(int _Value);
typedef Native_get_errno = errno_t Function(ffi.Pointer<ffi.Int> _Value);
typedef Dart_get_errno = int Function(ffi.Pointer<ffi.Int> _Value);
typedef Native__threadid = ffi.UnsignedLong Function();
typedef Dart__threadid = int Function();
typedef Native__threadhandle = ffi.UintPtr Function();
typedef Dart__threadhandle = int Function();
typedef NativeAlBufferDataStatic = ffi.Void Function(ALuint buffer,
    ALenum format, ffi.Pointer<ALvoid> data, ALsizei size, ALsizei freq);
typedef DartAlBufferDataStatic = void Function(
    int buffer, int format, ffi.Pointer<ALvoid> data, int size, int freq);
typedef Native_clearfp = ffi.UnsignedInt Function();
typedef Dart_clearfp = int Function();
typedef Native_controlfp = ffi.UnsignedInt Function(
    ffi.UnsignedInt _NewValue, ffi.UnsignedInt _Mask);
typedef Dart_controlfp = int Function(int _NewValue, int _Mask);
typedef Native_set_controlfp = ffi.Void Function(
    ffi.UnsignedInt _NewValue, ffi.UnsignedInt _Mask);
typedef Dart_set_controlfp = void Function(int _NewValue, int _Mask);
typedef Native_controlfp_s = errno_t Function(
    ffi.Pointer<ffi.UnsignedInt> _CurrentState,
    ffi.UnsignedInt _NewValue,
    ffi.UnsignedInt _Mask);
typedef Dart_controlfp_s = int Function(
    ffi.Pointer<ffi.UnsignedInt> _CurrentState, int _NewValue, int _Mask);
typedef Native_statusfp = ffi.UnsignedInt Function();
typedef Dart_statusfp = int Function();
typedef Native_fpreset = ffi.Void Function();
typedef Dart_fpreset = void Function();
typedef Native_control87 = ffi.UnsignedInt Function(
    ffi.UnsignedInt _NewValue, ffi.UnsignedInt _Mask);
typedef Dart_control87 = int Function(int _NewValue, int _Mask);
typedef Native__fpecode = ffi.Pointer<ffi.Int> Function();
typedef Dart__fpecode = ffi.Pointer<ffi.Int> Function();
typedef Native__fpe_flt_rounds = ffi.Int Function();
typedef Dart__fpe_flt_rounds = int Function();
typedef Native_copysign = ffi.Double Function(
    ffi.Double _Number, ffi.Double _Sign);
typedef Dart_copysign = double Function(double _Number, double _Sign);
typedef Native_chgsign = ffi.Double Function(ffi.Double _X);
typedef Dart_chgsign = double Function(double _X);
typedef Native_scalb = ffi.Double Function(ffi.Double _X, ffi.Long _Y);
typedef Dart_scalb = double Function(double _X, int _Y);
typedef Native_logb = ffi.Double Function(ffi.Double _X);
typedef Dart_logb = double Function(double _X);
typedef Native_nextafter = ffi.Double Function(ffi.Double _X, ffi.Double _Y);
typedef Dart_nextafter = double Function(double _X, double _Y);
typedef Native_finite = ffi.Int Function(ffi.Double _X);
typedef Dart_finite = int Function(double _X);
typedef Native_isnan = ffi.Int Function(ffi.Double _X);
typedef Dart_isnan = int Function(double _X);
typedef Native_fpclass = ffi.Int Function(ffi.Double _X);
typedef Dart_fpclass = int Function(double _X);
typedef Native_scalbf = ffi.Float Function(ffi.Float _X, ffi.Long _Y);
typedef Dart_scalbf = double Function(double _X, int _Y);
typedef NativeFpreset = ffi.Void Function();
typedef DartFpreset = void Function();
typedef NativeAlGenEffects = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> effects);
typedef DartAlGenEffects = void Function(int n, ffi.Pointer<ALuint> effects);
typedef NativeAlDeleteEffects = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> effects);
typedef DartAlDeleteEffects = void Function(int n, ffi.Pointer<ALuint> effects);
typedef NativeAlIsEffect = ALboolean Function(ALuint effect);
typedef DartAlIsEffect = int Function(int effect);
typedef NativeAlEffecti = ffi.Void Function(
    ALuint effect, ALenum param, ALint iValue);
typedef DartAlEffecti = void Function(int effect, int param, int iValue);
typedef NativeAlEffectiv = ffi.Void Function(
    ALuint effect, ALenum param, ffi.Pointer<ALint> piValues);
typedef DartAlEffectiv = void Function(
    int effect, int param, ffi.Pointer<ALint> piValues);
typedef NativeAlEffectf = ffi.Void Function(
    ALuint effect, ALenum param, ALfloat flValue);
typedef DartAlEffectf = void Function(int effect, int param, double flValue);
typedef NativeAlEffectfv = ffi.Void Function(
    ALuint effect, ALenum param, ffi.Pointer<ALfloat> pflValues);
typedef DartAlEffectfv = void Function(
    int effect, int param, ffi.Pointer<ALfloat> pflValues);
typedef NativeAlGetEffecti = ffi.Void Function(
    ALuint effect, ALenum param, ffi.Pointer<ALint> piValue);
typedef DartAlGetEffecti = void Function(
    int effect, int param, ffi.Pointer<ALint> piValue);
typedef NativeAlGetEffectiv = ffi.Void Function(
    ALuint effect, ALenum param, ffi.Pointer<ALint> piValues);
typedef DartAlGetEffectiv = void Function(
    int effect, int param, ffi.Pointer<ALint> piValues);
typedef NativeAlGetEffectf = ffi.Void Function(
    ALuint effect, ALenum param, ffi.Pointer<ALfloat> pflValue);
typedef DartAlGetEffectf = void Function(
    int effect, int param, ffi.Pointer<ALfloat> pflValue);
typedef NativeAlGetEffectfv = ffi.Void Function(
    ALuint effect, ALenum param, ffi.Pointer<ALfloat> pflValues);
typedef DartAlGetEffectfv = void Function(
    int effect, int param, ffi.Pointer<ALfloat> pflValues);
typedef NativeAlGenFilters = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> filters);
typedef DartAlGenFilters = void Function(int n, ffi.Pointer<ALuint> filters);
typedef NativeAlDeleteFilters = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> filters);
typedef DartAlDeleteFilters = void Function(int n, ffi.Pointer<ALuint> filters);
typedef NativeAlIsFilter = ALboolean Function(ALuint filter);
typedef DartAlIsFilter = int Function(int filter);
typedef NativeAlFilteri = ffi.Void Function(
    ALuint filter, ALenum param, ALint iValue);
typedef DartAlFilteri = void Function(int filter, int param, int iValue);
typedef NativeAlFilteriv = ffi.Void Function(
    ALuint filter, ALenum param, ffi.Pointer<ALint> piValues);
typedef DartAlFilteriv = void Function(
    int filter, int param, ffi.Pointer<ALint> piValues);
typedef NativeAlFilterf = ffi.Void Function(
    ALuint filter, ALenum param, ALfloat flValue);
typedef DartAlFilterf = void Function(int filter, int param, double flValue);
typedef NativeAlFilterfv = ffi.Void Function(
    ALuint filter, ALenum param, ffi.Pointer<ALfloat> pflValues);
typedef DartAlFilterfv = void Function(
    int filter, int param, ffi.Pointer<ALfloat> pflValues);
typedef NativeAlGetFilteri = ffi.Void Function(
    ALuint filter, ALenum param, ffi.Pointer<ALint> piValue);
typedef DartAlGetFilteri = void Function(
    int filter, int param, ffi.Pointer<ALint> piValue);
typedef NativeAlGetFilteriv = ffi.Void Function(
    ALuint filter, ALenum param, ffi.Pointer<ALint> piValues);
typedef DartAlGetFilteriv = void Function(
    int filter, int param, ffi.Pointer<ALint> piValues);
typedef NativeAlGetFilterf = ffi.Void Function(
    ALuint filter, ALenum param, ffi.Pointer<ALfloat> pflValue);
typedef DartAlGetFilterf = void Function(
    int filter, int param, ffi.Pointer<ALfloat> pflValue);
typedef NativeAlGetFilterfv = ffi.Void Function(
    ALuint filter, ALenum param, ffi.Pointer<ALfloat> pflValues);
typedef DartAlGetFilterfv = void Function(
    int filter, int param, ffi.Pointer<ALfloat> pflValues);
typedef NativeAlGenAuxiliaryEffectSlots = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> effectslots);
typedef DartAlGenAuxiliaryEffectSlots = void Function(
    int n, ffi.Pointer<ALuint> effectslots);
typedef NativeAlDeleteAuxiliaryEffectSlots = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> effectslots);
typedef DartAlDeleteAuxiliaryEffectSlots = void Function(
    int n, ffi.Pointer<ALuint> effectslots);
typedef NativeAlIsAuxiliaryEffectSlot = ALboolean Function(ALuint effectslot);
typedef DartAlIsAuxiliaryEffectSlot = int Function(int effectslot);
typedef NativeAlAuxiliaryEffectSloti = ffi.Void Function(
    ALuint effectslot, ALenum param, ALint iValue);
typedef DartAlAuxiliaryEffectSloti = void Function(
    int effectslot, int param, int iValue);
typedef NativeAlAuxiliaryEffectSlotiv = ffi.Void Function(
    ALuint effectslot, ALenum param, ffi.Pointer<ALint> piValues);
typedef DartAlAuxiliaryEffectSlotiv = void Function(
    int effectslot, int param, ffi.Pointer<ALint> piValues);
typedef NativeAlAuxiliaryEffectSlotf = ffi.Void Function(
    ALuint effectslot, ALenum param, ALfloat flValue);
typedef DartAlAuxiliaryEffectSlotf = void Function(
    int effectslot, int param, double flValue);
typedef NativeAlAuxiliaryEffectSlotfv = ffi.Void Function(
    ALuint effectslot, ALenum param, ffi.Pointer<ALfloat> pflValues);
typedef DartAlAuxiliaryEffectSlotfv = void Function(
    int effectslot, int param, ffi.Pointer<ALfloat> pflValues);
typedef NativeAlGetAuxiliaryEffectSloti = ffi.Void Function(
    ALuint effectslot, ALenum param, ffi.Pointer<ALint> piValue);
typedef DartAlGetAuxiliaryEffectSloti = void Function(
    int effectslot, int param, ffi.Pointer<ALint> piValue);
typedef NativeAlGetAuxiliaryEffectSlotiv = ffi.Void Function(
    ALuint effectslot, ALenum param, ffi.Pointer<ALint> piValues);
typedef DartAlGetAuxiliaryEffectSlotiv = void Function(
    int effectslot, int param, ffi.Pointer<ALint> piValues);
typedef NativeAlGetAuxiliaryEffectSlotf = ffi.Void Function(
    ALuint effectslot, ALenum param, ffi.Pointer<ALfloat> pflValue);
typedef DartAlGetAuxiliaryEffectSlotf = void Function(
    int effectslot, int param, ffi.Pointer<ALfloat> pflValue);
typedef NativeAlGetAuxiliaryEffectSlotfv = ffi.Void Function(
    ALuint effectslot, ALenum param, ffi.Pointer<ALfloat> pflValues);
typedef DartAlGetAuxiliaryEffectSlotfv = void Function(
    int effectslot, int param, ffi.Pointer<ALfloat> pflValues);
typedef NativeAlcSetThreadContext = ALCboolean Function(
    ffi.Pointer<ALCcontext> context);
typedef DartAlcSetThreadContext = int Function(ffi.Pointer<ALCcontext> context);
typedef NativeAlcGetThreadContext = ffi.Pointer<ALCcontext> Function();
typedef DartAlcGetThreadContext = ffi.Pointer<ALCcontext> Function();
typedef NativeAlBufferSubDataSOFT = ffi.Void Function(ALuint buffer,
    ALenum format, ffi.Pointer<ALvoid> data, ALsizei offset, ALsizei length);
typedef DartAlBufferSubDataSOFT = void Function(
    int buffer, int format, ffi.Pointer<ALvoid> data, int offset, int length);
typedef LPALFOLDBACKCALLBACK
    = ffi.Pointer<ffi.NativeFunction<LPALFOLDBACKCALLBACKFunction>>;
typedef LPALFOLDBACKCALLBACKFunction = ffi.Void Function(ALenum, ALsizei);
typedef DartLPALFOLDBACKCALLBACKFunction = void Function(
    DartALenum, DartALsizei);
typedef NativeAlRequestFoldbackStart = ffi.Void Function(
    ALenum mode,
    ALsizei count,
    ALsizei length,
    ffi.Pointer<ALfloat> mem,
    LPALFOLDBACKCALLBACK callback);
typedef DartAlRequestFoldbackStart = void Function(int mode, int count,
    int length, ffi.Pointer<ALfloat> mem, LPALFOLDBACKCALLBACK callback);
typedef NativeAlRequestFoldbackStop = ffi.Void Function();
typedef DartAlRequestFoldbackStop = void Function();
typedef NativeAlBufferSamplesSOFT = ffi.Void Function(
    ALuint buffer,
    ALuint samplerate,
    ALenum internalformat,
    ALsizei samples,
    ALenum channels,
    ALenum type,
    ffi.Pointer<ALvoid> data);
typedef DartAlBufferSamplesSOFT = void Function(
    int buffer,
    int samplerate,
    int internalformat,
    int samples,
    int channels,
    int type,
    ffi.Pointer<ALvoid> data);
typedef NativeAlBufferSubSamplesSOFT = ffi.Void Function(
    ALuint buffer,
    ALsizei offset,
    ALsizei samples,
    ALenum channels,
    ALenum type,
    ffi.Pointer<ALvoid> data);
typedef DartAlBufferSubSamplesSOFT = void Function(int buffer, int offset,
    int samples, int channels, int type, ffi.Pointer<ALvoid> data);
typedef NativeAlGetBufferSamplesSOFT = ffi.Void Function(
    ALuint buffer,
    ALsizei offset,
    ALsizei samples,
    ALenum channels,
    ALenum type,
    ffi.Pointer<ALvoid> data);
typedef DartAlGetBufferSamplesSOFT = void Function(int buffer, int offset,
    int samples, int channels, int type, ffi.Pointer<ALvoid> data);
typedef NativeAlIsBufferFormatSupportedSOFT = ALboolean Function(ALenum format);
typedef DartAlIsBufferFormatSupportedSOFT = int Function(int format);
typedef NativeAlcLoopbackOpenDeviceSOFT = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCchar> deviceName);
typedef DartAlcLoopbackOpenDeviceSOFT = ffi.Pointer<ALCdevice> Function(
    ffi.Pointer<ALCchar> deviceName);
typedef NativeAlcIsRenderFormatSupportedSOFT = ALCboolean Function(
    ffi.Pointer<ALCdevice> device,
    ALCsizei freq,
    ALCenum channels,
    ALCenum type);
typedef DartAlcIsRenderFormatSupportedSOFT = int Function(
    ffi.Pointer<ALCdevice> device, int freq, int channels, int type);
typedef NativeAlcRenderSamplesSOFT = ffi.Void Function(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCvoid> buffer,
    ALCsizei samples);
typedef DartAlcRenderSamplesSOFT = void Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCvoid> buffer, int samples);
typedef NativeAlSourcedSOFT = ffi.Void Function(
    ALuint source, ALenum param, ALdouble value);
typedef DartAlSourcedSOFT = void Function(int source, int param, double value);
typedef NativeAlSource3dSOFT = ffi.Void Function(ALuint source, ALenum param,
    ALdouble value1, ALdouble value2, ALdouble value3);
typedef DartAlSource3dSOFT = void Function(
    int source, int param, double value1, double value2, double value3);
typedef NativeAlSourcedvSOFT = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALdouble> values);
typedef DartAlSourcedvSOFT = void Function(
    int source, int param, ffi.Pointer<ALdouble> values);
typedef NativeAlGetSourcedSOFT = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALdouble> value);
typedef DartAlGetSourcedSOFT = void Function(
    int source, int param, ffi.Pointer<ALdouble> value);
typedef NativeAlGetSource3dSOFT = ffi.Void Function(
    ALuint source,
    ALenum param,
    ffi.Pointer<ALdouble> value1,
    ffi.Pointer<ALdouble> value2,
    ffi.Pointer<ALdouble> value3);
typedef DartAlGetSource3dSOFT = void Function(
    int source,
    int param,
    ffi.Pointer<ALdouble> value1,
    ffi.Pointer<ALdouble> value2,
    ffi.Pointer<ALdouble> value3);
typedef NativeAlGetSourcedvSOFT = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALdouble> values);
typedef DartAlGetSourcedvSOFT = void Function(
    int source, int param, ffi.Pointer<ALdouble> values);
typedef ALint64SOFT = _alsoft_int64_t;
typedef _alsoft_int64_t = ffi.Int64;
typedef Dart_alsoft_int64_t = int;
typedef NativeAlSourcei64SOFT = ffi.Void Function(
    ALuint source, ALenum param, ALint64SOFT value);
typedef DartAlSourcei64SOFT = void Function(int source, int param, int value);
typedef NativeAlSource3i64SOFT = ffi.Void Function(ALuint source, ALenum param,
    ALint64SOFT value1, ALint64SOFT value2, ALint64SOFT value3);
typedef DartAlSource3i64SOFT = void Function(
    int source, int param, int value1, int value2, int value3);
typedef NativeAlSourcei64vSOFT = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALint64SOFT> values);
typedef DartAlSourcei64vSOFT = void Function(
    int source, int param, ffi.Pointer<ALint64SOFT> values);
typedef NativeAlGetSourcei64SOFT = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALint64SOFT> value);
typedef DartAlGetSourcei64SOFT = void Function(
    int source, int param, ffi.Pointer<ALint64SOFT> value);
typedef NativeAlGetSource3i64SOFT = ffi.Void Function(
    ALuint source,
    ALenum param,
    ffi.Pointer<ALint64SOFT> value1,
    ffi.Pointer<ALint64SOFT> value2,
    ffi.Pointer<ALint64SOFT> value3);
typedef DartAlGetSource3i64SOFT = void Function(
    int source,
    int param,
    ffi.Pointer<ALint64SOFT> value1,
    ffi.Pointer<ALint64SOFT> value2,
    ffi.Pointer<ALint64SOFT> value3);
typedef NativeAlGetSourcei64vSOFT = ffi.Void Function(
    ALuint source, ALenum param, ffi.Pointer<ALint64SOFT> values);
typedef DartAlGetSourcei64vSOFT = void Function(
    int source, int param, ffi.Pointer<ALint64SOFT> values);
typedef NativeAlDeferUpdatesSOFT = ffi.Void Function();
typedef DartAlDeferUpdatesSOFT = void Function();
typedef NativeAlProcessUpdatesSOFT = ffi.Void Function();
typedef DartAlProcessUpdatesSOFT = void Function();
typedef NativeAlcDevicePauseSOFT = ffi.Void Function(
    ffi.Pointer<ALCdevice> device);
typedef DartAlcDevicePauseSOFT = void Function(ffi.Pointer<ALCdevice> device);
typedef NativeAlcDeviceResumeSOFT = ffi.Void Function(
    ffi.Pointer<ALCdevice> device);
typedef DartAlcDeviceResumeSOFT = void Function(ffi.Pointer<ALCdevice> device);
typedef NativeAlcGetStringiSOFT = ffi.Pointer<ALCchar> Function(
    ffi.Pointer<ALCdevice> device, ALCenum paramName, ALCsizei index);
typedef DartAlcGetStringiSOFT = ffi.Pointer<ALCchar> Function(
    ffi.Pointer<ALCdevice> device, int paramName, int index);
typedef NativeAlcResetDeviceSOFT = ALCboolean Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCint> attribs);
typedef DartAlcResetDeviceSOFT = int Function(
    ffi.Pointer<ALCdevice> device, ffi.Pointer<ALCint> attribs);
typedef NativeAlGetStringiSOFT = ffi.Pointer<ALchar> Function(
    ALenum pname, ALsizei index);
typedef DartAlGetStringiSOFT = ffi.Pointer<ALchar> Function(
    int pname, int index);
typedef ALCint64SOFT = _alsoft_int64_t;
typedef NativeAlcGetInteger64vSOFT = ffi.Void Function(
    ffi.Pointer<ALCdevice> device,
    ALCenum pname,
    ALsizei size,
    ffi.Pointer<ALCint64SOFT> values);
typedef DartAlcGetInteger64vSOFT = void Function(ffi.Pointer<ALCdevice> device,
    int pname, int size, ffi.Pointer<ALCint64SOFT> values);
typedef NativeAlEventControlSOFT = ffi.Void Function(
    ALsizei count, ffi.Pointer<ALenum> types, ALboolean enable);
typedef DartAlEventControlSOFT = void Function(
    int count, ffi.Pointer<ALenum> types, int enable);
typedef ALEVENTPROCSOFT
    = ffi.Pointer<ffi.NativeFunction<ALEVENTPROCSOFTFunction>>;
typedef ALEVENTPROCSOFTFunction = ffi.Void Function(
    ALenum eventType,
    ALuint object,
    ALuint param,
    ALsizei length,
    ffi.Pointer<ALchar> message,
    ffi.Pointer<ffi.Void> userParam);
typedef DartALEVENTPROCSOFTFunction = void Function(
    DartALenum eventType,
    DartALuint object,
    DartALuint param,
    DartALsizei length,
    ffi.Pointer<ALchar> message,
    ffi.Pointer<ffi.Void> userParam);
typedef NativeAlEventCallbackSOFT = ffi.Void Function(
    ALEVENTPROCSOFT callback, ffi.Pointer<ffi.Void> userParam);
typedef DartAlEventCallbackSOFT = void Function(
    ALEVENTPROCSOFT callback, ffi.Pointer<ffi.Void> userParam);
typedef NativeAlGetPointerSOFT = ffi.Pointer<ffi.Void> Function(ALenum pname);
typedef DartAlGetPointerSOFT = ffi.Pointer<ffi.Void> Function(int pname);
typedef NativeAlGetPointervSOFT = ffi.Void Function(
    ALenum pname, ffi.Pointer<ffi.Pointer<ffi.Void>> values);
typedef DartAlGetPointervSOFT = void Function(
    int pname, ffi.Pointer<ffi.Pointer<ffi.Void>> values);
typedef NativeAlcReopenDeviceSOFT = ALCboolean Function(
    ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCchar> deviceName,
    ffi.Pointer<ALCint> attribs);
typedef DartAlcReopenDeviceSOFT = int Function(ffi.Pointer<ALCdevice> device,
    ffi.Pointer<ALCchar> deviceName, ffi.Pointer<ALCint> attribs);
typedef ALBUFFERCALLBACKTYPESOFT
    = ffi.Pointer<ffi.NativeFunction<ALBUFFERCALLBACKTYPESOFTFunction>>;
typedef ALBUFFERCALLBACKTYPESOFTFunction = ALsizei Function(
    ffi.Pointer<ALvoid> userptr,
    ffi.Pointer<ALvoid> sampledata,
    ALsizei numbytes);
typedef DartALBUFFERCALLBACKTYPESOFTFunction = DartALsizei Function(
    ffi.Pointer<ALvoid> userptr,
    ffi.Pointer<ALvoid> sampledata,
    DartALsizei numbytes);
typedef NativeAlBufferCallbackSOFT = ffi.Void Function(
    ALuint buffer,
    ALenum format,
    ALsizei freq,
    ALBUFFERCALLBACKTYPESOFT callback,
    ffi.Pointer<ALvoid> userptr);
typedef DartAlBufferCallbackSOFT = void Function(int buffer, int format,
    int freq, ALBUFFERCALLBACKTYPESOFT callback, ffi.Pointer<ALvoid> userptr);
typedef NativeAlGetBufferPtrSOFT = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ffi.Pointer<ALvoid>> ptr);
typedef DartAlGetBufferPtrSOFT = void Function(
    int buffer, int param, ffi.Pointer<ffi.Pointer<ALvoid>> ptr);
typedef NativeAlGetBuffer3PtrSOFT = ffi.Void Function(
    ALuint buffer,
    ALenum param,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr0,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr1,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr2);
typedef DartAlGetBuffer3PtrSOFT = void Function(
    int buffer,
    int param,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr0,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr1,
    ffi.Pointer<ffi.Pointer<ALvoid>> ptr2);
typedef NativeAlGetBufferPtrvSOFT = ffi.Void Function(
    ALuint buffer, ALenum param, ffi.Pointer<ffi.Pointer<ALvoid>> ptr);
typedef DartAlGetBufferPtrvSOFT = void Function(
    int buffer, int param, ffi.Pointer<ffi.Pointer<ALvoid>> ptr);
typedef NativeAlSourcePlayAtTimeSOFT = ffi.Void Function(
    ALuint source, ALint64SOFT start_time);
typedef DartAlSourcePlayAtTimeSOFT = void Function(int source, int start_time);
typedef NativeAlSourcePlayAtTimevSOFT = ffi.Void Function(
    ALsizei n, ffi.Pointer<ALuint> sources, ALint64SOFT start_time);
typedef DartAlSourcePlayAtTimevSOFT = void Function(
    int n, ffi.Pointer<ALuint> sources, int start_time);
typedef ALDEBUGPROCEXT
    = ffi.Pointer<ffi.NativeFunction<ALDEBUGPROCEXTFunction>>;
typedef ALDEBUGPROCEXTFunction = ffi.Void Function(
    ALenum source,
    ALenum type,
    ALuint id,
    ALenum severity,
    ALsizei length,
    ffi.Pointer<ALchar> message,
    ffi.Pointer<ffi.Void> userParam);
typedef DartALDEBUGPROCEXTFunction = void Function(
    DartALenum source,
    DartALenum type,
    DartALuint id,
    DartALenum severity,
    DartALsizei length,
    ffi.Pointer<ALchar> message,
    ffi.Pointer<ffi.Void> userParam);
typedef NativeAlDebugMessageCallbackEXT = ffi.Void Function(
    ALDEBUGPROCEXT callback, ffi.Pointer<ffi.Void> userParam);
typedef DartAlDebugMessageCallbackEXT = void Function(
    ALDEBUGPROCEXT callback, ffi.Pointer<ffi.Void> userParam);
typedef NativeAlDebugMessageInsertEXT = ffi.Void Function(
    ALenum source,
    ALenum type,
    ALuint id,
    ALenum severity,
    ALsizei length,
    ffi.Pointer<ALchar> message);
typedef DartAlDebugMessageInsertEXT = void Function(int source, int type,
    int id, int severity, int length, ffi.Pointer<ALchar> message);
typedef NativeAlDebugMessageControlEXT = ffi.Void Function(
    ALenum source,
    ALenum type,
    ALenum severity,
    ALsizei count,
    ffi.Pointer<ALuint> ids,
    ALboolean enable);
typedef DartAlDebugMessageControlEXT = void Function(int source, int type,
    int severity, int count, ffi.Pointer<ALuint> ids, int enable);
typedef NativeAlPushDebugGroupEXT = ffi.Void Function(
    ALenum source, ALuint id, ALsizei length, ffi.Pointer<ALchar> message);
typedef DartAlPushDebugGroupEXT = void Function(
    int source, int id, int length, ffi.Pointer<ALchar> message);
typedef NativeAlPopDebugGroupEXT = ffi.Void Function();
typedef DartAlPopDebugGroupEXT = void Function();
typedef NativeAlGetDebugMessageLogEXT = ALuint Function(
    ALuint count,
    ALsizei logBufSize,
    ffi.Pointer<ALenum> sources,
    ffi.Pointer<ALenum> types,
    ffi.Pointer<ALuint> ids,
    ffi.Pointer<ALenum> severities,
    ffi.Pointer<ALsizei> lengths,
    ffi.Pointer<ALchar> logBuf);
typedef DartAlGetDebugMessageLogEXT = int Function(
    int count,
    int logBufSize,
    ffi.Pointer<ALenum> sources,
    ffi.Pointer<ALenum> types,
    ffi.Pointer<ALuint> ids,
    ffi.Pointer<ALenum> severities,
    ffi.Pointer<ALsizei> lengths,
    ffi.Pointer<ALchar> logBuf);
typedef NativeAlObjectLabelEXT = ffi.Void Function(
    ALenum identifier, ALuint name, ALsizei length, ffi.Pointer<ALchar> label);
typedef DartAlObjectLabelEXT = void Function(
    int identifier, int name, int length, ffi.Pointer<ALchar> label);
typedef NativeAlGetObjectLabelEXT = ffi.Void Function(
    ALenum identifier,
    ALuint name,
    ALsizei bufSize,
    ffi.Pointer<ALsizei> length,
    ffi.Pointer<ALchar> label);
typedef DartAlGetObjectLabelEXT = void Function(int identifier, int name,
    int bufSize, ffi.Pointer<ALsizei> length, ffi.Pointer<ALchar> label);
typedef NativeAlcEventControlSOFT = ALCboolean Function(
    ALCsizei count, ffi.Pointer<ALCenum> events, ALCboolean enable);
typedef DartAlcEventControlSOFT = int Function(
    int count, ffi.Pointer<ALCenum> events, int enable);
typedef ALCEVENTPROCTYPESOFT
    = ffi.Pointer<ffi.NativeFunction<ALCEVENTPROCTYPESOFTFunction>>;
typedef ALCEVENTPROCTYPESOFTFunction = ffi.Void Function(
    ALCenum eventType,
    ALCenum deviceType,
    ffi.Pointer<ALCdevice> device,
    ALCsizei length,
    ffi.Pointer<ALCchar> message,
    ffi.Pointer<ffi.Void> userParam);
typedef DartALCEVENTPROCTYPESOFTFunction = void Function(
    DartALCenum eventType,
    DartALCenum deviceType,
    ffi.Pointer<ALCdevice> device,
    DartALCsizei length,
    ffi.Pointer<ALCchar> message,
    ffi.Pointer<ffi.Void> userParam);
typedef NativeAlcEventCallbackSOFT = ffi.Void Function(
    ALCEVENTPROCTYPESOFT callback, ffi.Pointer<ffi.Void> userParam);
typedef DartAlcEventCallbackSOFT = void Function(
    ALCEVENTPROCTYPESOFT callback, ffi.Pointer<ffi.Void> userParam);

const int AL_INVALID = -1;

const int AL_ILLEGAL_ENUM = 40962;

const int AL_ILLEGAL_COMMAND = 40964;

const int AL_NONE = 0;

const int AL_FALSE = 0;

const int AL_TRUE = 1;

const int AL_SOURCE_RELATIVE = 514;

const int AL_CONE_INNER_ANGLE = 4097;

const int AL_CONE_OUTER_ANGLE = 4098;

const int AL_PITCH = 4099;

const int AL_POSITION = 4100;

const int AL_DIRECTION = 4101;

const int AL_VELOCITY = 4102;

const int AL_LOOPING = 4103;

const int AL_BUFFER = 4105;

const int AL_GAIN = 4106;

const int AL_MIN_GAIN = 4109;

const int AL_MAX_GAIN = 4110;

const int AL_ORIENTATION = 4111;

const int AL_SOURCE_STATE = 4112;

const int AL_INITIAL = 4113;

const int AL_PLAYING = 4114;

const int AL_PAUSED = 4115;

const int AL_STOPPED = 4116;

const int AL_BUFFERS_QUEUED = 4117;

const int AL_BUFFERS_PROCESSED = 4118;

const int AL_REFERENCE_DISTANCE = 4128;

const int AL_ROLLOFF_FACTOR = 4129;

const int AL_CONE_OUTER_GAIN = 4130;

const int AL_MAX_DISTANCE = 4131;

const int AL_SEC_OFFSET = 4132;

const int AL_SAMPLE_OFFSET = 4133;

const int AL_BYTE_OFFSET = 4134;

const int AL_SOURCE_TYPE = 4135;

const int AL_STATIC = 4136;

const int AL_STREAMING = 4137;

const int AL_UNDETERMINED = 4144;

const int AL_FORMAT_MONO8 = 4352;

const int AL_FORMAT_MONO16 = 4353;

const int AL_FORMAT_STEREO8 = 4354;

const int AL_FORMAT_STEREO16 = 4355;

const int AL_FREQUENCY = 8193;

const int AL_BITS = 8194;

const int AL_CHANNELS = 8195;

const int AL_SIZE = 8196;

const int AL_UNUSED = 8208;

const int AL_PENDING = 8209;

const int AL_PROCESSED = 8210;

const int AL_NO_ERROR = 0;

const int AL_INVALID_NAME = 40961;

const int AL_INVALID_ENUM = 40962;

const int AL_INVALID_VALUE = 40963;

const int AL_INVALID_OPERATION = 40964;

const int AL_OUT_OF_MEMORY = 40965;

const int AL_VENDOR = 45057;

const int AL_VERSION = 45058;

const int AL_RENDERER = 45059;

const int AL_EXTENSIONS = 45060;

const int AL_DOPPLER_FACTOR = 49152;

const int AL_DOPPLER_VELOCITY = 49153;

const int AL_SPEED_OF_SOUND = 49155;

const int AL_DISTANCE_MODEL = 53248;

const int AL_INVERSE_DISTANCE = 53249;

const int AL_INVERSE_DISTANCE_CLAMPED = 53250;

const int AL_LINEAR_DISTANCE = 53251;

const int AL_LINEAR_DISTANCE_CLAMPED = 53252;

const int AL_EXPONENT_DISTANCE = 53253;

const int AL_EXPONENT_DISTANCE_CLAMPED = 53254;

const int ALC_INVALID = 0;

const int ALC_VERSION_0_1 = 1;

const int ALC_FALSE = 0;

const int ALC_TRUE = 1;

const int ALC_FREQUENCY = 4103;

const int ALC_REFRESH = 4104;

const int ALC_SYNC = 4105;

const int ALC_MONO_SOURCES = 4112;

const int ALC_STEREO_SOURCES = 4113;

const int ALC_NO_ERROR = 0;

const int ALC_INVALID_DEVICE = 40961;

const int ALC_INVALID_CONTEXT = 40962;

const int ALC_INVALID_ENUM = 40963;

const int ALC_INVALID_VALUE = 40964;

const int ALC_OUT_OF_MEMORY = 40965;

const int ALC_MAJOR_VERSION = 4096;

const int ALC_MINOR_VERSION = 4097;

const int ALC_ATTRIBUTES_SIZE = 4098;

const int ALC_ALL_ATTRIBUTES = 4099;

const int ALC_DEFAULT_DEVICE_SPECIFIER = 4100;

const int ALC_DEVICE_SPECIFIER = 4101;

const int ALC_EXTENSIONS = 4102;

const int ALC_EXT_CAPTURE = 1;

const int ALC_CAPTURE_DEVICE_SPECIFIER = 784;

const int ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER = 785;

const int ALC_CAPTURE_SAMPLES = 786;

const int ALC_ENUMERATE_ALL_EXT = 1;

const int ALC_DEFAULT_ALL_DEVICES_SPECIFIER = 4114;

const int ALC_ALL_DEVICES_SPECIFIER = 4115;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int AL_LOKI_IMA_ADPCM_format = 1;

const int AL_FORMAT_IMA_ADPCM_MONO16_EXT = 65536;

const int AL_FORMAT_IMA_ADPCM_STEREO16_EXT = 65537;

const int AL_LOKI_WAVE_format = 1;

const int AL_FORMAT_WAVE_EXT = 65538;

const int AL_EXT_vorbis = 1;

const int AL_FORMAT_VORBIS_EXT = 65539;

const int AL_LOKI_quadriphonic = 1;

const int AL_FORMAT_QUAD8_LOKI = 65540;

const int AL_FORMAT_QUAD16_LOKI = 65541;

const int AL_EXT_float32 = 1;

const int AL_FORMAT_MONO_FLOAT32 = 65552;

const int AL_FORMAT_STEREO_FLOAT32 = 65553;

const int AL_EXT_double = 1;

const int AL_FORMAT_MONO_DOUBLE_EXT = 65554;

const int AL_FORMAT_STEREO_DOUBLE_EXT = 65555;

const int AL_EXT_MULAW = 1;

const int AL_FORMAT_MONO_MULAW_EXT = 65556;

const int AL_FORMAT_STEREO_MULAW_EXT = 65557;

const int AL_EXT_ALAW = 1;

const int AL_FORMAT_MONO_ALAW_EXT = 65558;

const int AL_FORMAT_STEREO_ALAW_EXT = 65559;

const int ALC_LOKI_audio_channel = 1;

const int ALC_CHAN_MAIN_LOKI = 5242881;

const int ALC_CHAN_PCM_LOKI = 5242882;

const int ALC_CHAN_CD_LOKI = 5242883;

const int AL_EXT_MCFORMATS = 1;

const int AL_FORMAT_QUAD8 = 4612;

const int AL_FORMAT_QUAD16 = 4613;

const int AL_FORMAT_QUAD32 = 4614;

const int AL_FORMAT_REAR8 = 4615;

const int AL_FORMAT_REAR16 = 4616;

const int AL_FORMAT_REAR32 = 4617;

const int AL_FORMAT_51CHN8 = 4618;

const int AL_FORMAT_51CHN16 = 4619;

const int AL_FORMAT_51CHN32 = 4620;

const int AL_FORMAT_61CHN8 = 4621;

const int AL_FORMAT_61CHN16 = 4622;

const int AL_FORMAT_61CHN32 = 4623;

const int AL_FORMAT_71CHN8 = 4624;

const int AL_FORMAT_71CHN16 = 4625;

const int AL_FORMAT_71CHN32 = 4626;

const int AL_EXT_MULAW_MCFORMATS = 1;

const int AL_FORMAT_MONO_MULAW = 65556;

const int AL_FORMAT_STEREO_MULAW = 65557;

const int AL_FORMAT_QUAD_MULAW = 65569;

const int AL_FORMAT_REAR_MULAW = 65570;

const int AL_FORMAT_51CHN_MULAW = 65571;

const int AL_FORMAT_61CHN_MULAW = 65572;

const int AL_FORMAT_71CHN_MULAW = 65573;

const int AL_EXT_IMA4 = 1;

const int AL_FORMAT_MONO_IMA4 = 4864;

const int AL_FORMAT_STEREO_IMA4 = 4865;

const int AL_EXT_STATIC_BUFFER = 1;

const int ALC_EXT_EFX = 1;

const int FLT_EVAL_METHOD = 0;

const int DBL_DECIMAL_DIG = 17;

const int DBL_DIG = 15;

const double DBL_EPSILON = 2.220446049250313e-16;

const int DBL_HAS_SUBNORM = 1;

const int DBL_MANT_DIG = 53;

const double DBL_MAX = 1.7976931348623157e+308;

const int DBL_MAX_10_EXP = 308;

const int DBL_MAX_EXP = 1024;

const double DBL_MIN = 2.2250738585072014e-308;

const int DBL_MIN_10_EXP = -307;

const int DBL_MIN_EXP = -1021;

const int _DBL_RADIX = 2;

const double DBL_TRUE_MIN = 5e-324;

const int FLT_DECIMAL_DIG = 9;

const int FLT_DIG = 6;

const double FLT_EPSILON = 1.1920928955078125e-7;

const int FLT_HAS_SUBNORM = 1;

const int FLT_GUARD = 0;

const int FLT_MANT_DIG = 24;

const double FLT_MAX = 3.4028234663852886e+38;

const int FLT_MAX_10_EXP = 38;

const int FLT_MAX_EXP = 128;

const double FLT_MIN = 1.1754943508222875e-38;

const int FLT_MIN_10_EXP = -37;

const int FLT_MIN_EXP = -125;

const int FLT_NORMALIZE = 0;

const int FLT_RADIX = 2;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const int LDBL_DIG = 15;

const double LDBL_EPSILON = 2.220446049250313e-16;

const int LDBL_HAS_SUBNORM = 1;

const int LDBL_MANT_DIG = 53;

const double LDBL_MAX = 1.7976931348623157e+308;

const int LDBL_MAX_10_EXP = 308;

const int LDBL_MAX_EXP = 1024;

const double LDBL_MIN = 2.2250738585072014e-308;

const int LDBL_MIN_10_EXP = -307;

const int LDBL_MIN_EXP = -1021;

const int _LDBL_RADIX = 2;

const double LDBL_TRUE_MIN = 5e-324;

const int DECIMAL_DIG = 17;

const int _SW_INEXACT = 1;

const int _SW_UNDERFLOW = 2;

const int _SW_OVERFLOW = 4;

const int _SW_ZERODIVIDE = 8;

const int _SW_INVALID = 16;

const int _SW_DENORMAL = 524288;

const int _EM_AMBIGUIOUS = 2147483648;

const int _EM_AMBIGUOUS = 2147483648;

const int _MCW_EM = 524319;

const int _EM_INEXACT = 1;

const int _EM_UNDERFLOW = 2;

const int _EM_OVERFLOW = 4;

const int _EM_ZERODIVIDE = 8;

const int _EM_INVALID = 16;

const int _EM_DENORMAL = 524288;

const int _MCW_RC = 768;

const int _RC_NEAR = 0;

const int _RC_DOWN = 256;

const int _RC_UP = 512;

const int _RC_CHOP = 768;

const int _MCW_PC = 196608;

const int _PC_64 = 0;

const int _PC_53 = 65536;

const int _PC_24 = 131072;

const int _MCW_IC = 262144;

const int _IC_AFFINE = 262144;

const int _IC_PROJECTIVE = 0;

const int _MCW_DN = 50331648;

const int _DN_SAVE = 0;

const int _DN_FLUSH = 16777216;

const int _DN_FLUSH_OPERANDS_SAVE_RESULTS = 33554432;

const int _DN_SAVE_OPERANDS_FLUSH_RESULTS = 50331648;

const int _SW_UNEMULATED = 64;

const int _SW_SQRTNEG = 128;

const int _SW_STACKOVERFLOW = 512;

const int _SW_STACKUNDERFLOW = 1024;

const int _FPE_INVALID = 129;

const int _FPE_DENORMAL = 130;

const int _FPE_ZERODIVIDE = 131;

const int _FPE_OVERFLOW = 132;

const int _FPE_UNDERFLOW = 133;

const int _FPE_INEXACT = 134;

const int _FPE_UNEMULATED = 135;

const int _FPE_SQRTNEG = 136;

const int _FPE_STACKOVERFLOW = 138;

const int _FPE_STACKUNDERFLOW = 139;

const int _FPE_EXPLICITGEN = 140;

const int _FPE_MULTIPLE_TRAPS = 141;

const int _FPE_MULTIPLE_FAULTS = 142;

const int _FPCLASS_SNAN = 1;

const int _FPCLASS_QNAN = 2;

const int _FPCLASS_NINF = 4;

const int _FPCLASS_NN = 8;

const int _FPCLASS_ND = 16;

const int _FPCLASS_NZ = 32;

const int _FPCLASS_PZ = 64;

const int _FPCLASS_PD = 128;

const int _FPCLASS_PN = 256;

const int _FPCLASS_PINF = 512;

const int _CW_DEFAULT = 524319;

const int DBL_RADIX = 2;

const int LDBL_RADIX = 2;

const int EM_AMBIGUIOUS = 2147483648;

const int EM_AMBIGUOUS = 2147483648;

const int MCW_EM = 524319;

const int EM_INVALID = 16;

const int EM_DENORMAL = 524288;

const int EM_ZERODIVIDE = 8;

const int EM_OVERFLOW = 4;

const int EM_UNDERFLOW = 2;

const int EM_INEXACT = 1;

const int MCW_IC = 262144;

const int IC_AFFINE = 262144;

const int IC_PROJECTIVE = 0;

const int MCW_RC = 768;

const int RC_CHOP = 768;

const int RC_UP = 512;

const int RC_DOWN = 256;

const int RC_NEAR = 0;

const int MCW_PC = 196608;

const int PC_24 = 131072;

const int PC_53 = 65536;

const int PC_64 = 0;

const int CW_DEFAULT = 524319;

const int SW_INVALID = 16;

const int SW_DENORMAL = 524288;

const int SW_ZERODIVIDE = 8;

const int SW_OVERFLOW = 4;

const int SW_UNDERFLOW = 2;

const int SW_INEXACT = 1;

const int SW_UNEMULATED = 64;

const int SW_SQRTNEG = 128;

const int SW_STACKOVERFLOW = 512;

const int SW_STACKUNDERFLOW = 1024;

const int FPE_INVALID = 129;

const int FPE_DENORMAL = 130;

const int FPE_ZERODIVIDE = 131;

const int FPE_OVERFLOW = 132;

const int FPE_UNDERFLOW = 133;

const int FPE_INEXACT = 134;

const int FPE_UNEMULATED = 135;

const int FPE_SQRTNEG = 136;

const int FPE_STACKOVERFLOW = 138;

const int FPE_STACKUNDERFLOW = 139;

const int FPE_EXPLICITGEN = 140;

const String ALC_EXT_EFX_NAME = 'ALC_EXT_EFX';

const int ALC_EFX_MAJOR_VERSION = 131073;

const int ALC_EFX_MINOR_VERSION = 131074;

const int ALC_MAX_AUXILIARY_SENDS = 131075;

const int AL_METERS_PER_UNIT = 131076;

const int AL_DIRECT_FILTER = 131077;

const int AL_AUXILIARY_SEND_FILTER = 131078;

const int AL_AIR_ABSORPTION_FACTOR = 131079;

const int AL_ROOM_ROLLOFF_FACTOR = 131080;

const int AL_CONE_OUTER_GAINHF = 131081;

const int AL_DIRECT_FILTER_GAINHF_AUTO = 131082;

const int AL_AUXILIARY_SEND_FILTER_GAIN_AUTO = 131083;

const int AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 131084;

const int AL_REVERB_DENSITY = 1;

const int AL_REVERB_DIFFUSION = 2;

const int AL_REVERB_GAIN = 3;

const int AL_REVERB_GAINHF = 4;

const int AL_REVERB_DECAY_TIME = 5;

const int AL_REVERB_DECAY_HFRATIO = 6;

const int AL_REVERB_REFLECTIONS_GAIN = 7;

const int AL_REVERB_REFLECTIONS_DELAY = 8;

const int AL_REVERB_LATE_REVERB_GAIN = 9;

const int AL_REVERB_LATE_REVERB_DELAY = 10;

const int AL_REVERB_AIR_ABSORPTION_GAINHF = 11;

const int AL_REVERB_ROOM_ROLLOFF_FACTOR = 12;

const int AL_REVERB_DECAY_HFLIMIT = 13;

const int AL_EAXREVERB_DENSITY = 1;

const int AL_EAXREVERB_DIFFUSION = 2;

const int AL_EAXREVERB_GAIN = 3;

const int AL_EAXREVERB_GAINHF = 4;

const int AL_EAXREVERB_GAINLF = 5;

const int AL_EAXREVERB_DECAY_TIME = 6;

const int AL_EAXREVERB_DECAY_HFRATIO = 7;

const int AL_EAXREVERB_DECAY_LFRATIO = 8;

const int AL_EAXREVERB_REFLECTIONS_GAIN = 9;

const int AL_EAXREVERB_REFLECTIONS_DELAY = 10;

const int AL_EAXREVERB_REFLECTIONS_PAN = 11;

const int AL_EAXREVERB_LATE_REVERB_GAIN = 12;

const int AL_EAXREVERB_LATE_REVERB_DELAY = 13;

const int AL_EAXREVERB_LATE_REVERB_PAN = 14;

const int AL_EAXREVERB_ECHO_TIME = 15;

const int AL_EAXREVERB_ECHO_DEPTH = 16;

const int AL_EAXREVERB_MODULATION_TIME = 17;

const int AL_EAXREVERB_MODULATION_DEPTH = 18;

const int AL_EAXREVERB_AIR_ABSORPTION_GAINHF = 19;

const int AL_EAXREVERB_HFREFERENCE = 20;

const int AL_EAXREVERB_LFREFERENCE = 21;

const int AL_EAXREVERB_ROOM_ROLLOFF_FACTOR = 22;

const int AL_EAXREVERB_DECAY_HFLIMIT = 23;

const int AL_CHORUS_WAVEFORM = 1;

const int AL_CHORUS_PHASE = 2;

const int AL_CHORUS_RATE = 3;

const int AL_CHORUS_DEPTH = 4;

const int AL_CHORUS_FEEDBACK = 5;

const int AL_CHORUS_DELAY = 6;

const int AL_DISTORTION_EDGE = 1;

const int AL_DISTORTION_GAIN = 2;

const int AL_DISTORTION_LOWPASS_CUTOFF = 3;

const int AL_DISTORTION_EQCENTER = 4;

const int AL_DISTORTION_EQBANDWIDTH = 5;

const int AL_ECHO_DELAY = 1;

const int AL_ECHO_LRDELAY = 2;

const int AL_ECHO_DAMPING = 3;

const int AL_ECHO_FEEDBACK = 4;

const int AL_ECHO_SPREAD = 5;

const int AL_FLANGER_WAVEFORM = 1;

const int AL_FLANGER_PHASE = 2;

const int AL_FLANGER_RATE = 3;

const int AL_FLANGER_DEPTH = 4;

const int AL_FLANGER_FEEDBACK = 5;

const int AL_FLANGER_DELAY = 6;

const int AL_FREQUENCY_SHIFTER_FREQUENCY = 1;

const int AL_FREQUENCY_SHIFTER_LEFT_DIRECTION = 2;

const int AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION = 3;

const int AL_VOCAL_MORPHER_PHONEMEA = 1;

const int AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 2;

const int AL_VOCAL_MORPHER_PHONEMEB = 3;

const int AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 4;

const int AL_VOCAL_MORPHER_WAVEFORM = 5;

const int AL_VOCAL_MORPHER_RATE = 6;

const int AL_PITCH_SHIFTER_COARSE_TUNE = 1;

const int AL_PITCH_SHIFTER_FINE_TUNE = 2;

const int AL_RING_MODULATOR_FREQUENCY = 1;

const int AL_RING_MODULATOR_HIGHPASS_CUTOFF = 2;

const int AL_RING_MODULATOR_WAVEFORM = 3;

const int AL_AUTOWAH_ATTACK_TIME = 1;

const int AL_AUTOWAH_RELEASE_TIME = 2;

const int AL_AUTOWAH_RESONANCE = 3;

const int AL_AUTOWAH_PEAK_GAIN = 4;

const int AL_COMPRESSOR_ONOFF = 1;

const int AL_EQUALIZER_LOW_GAIN = 1;

const int AL_EQUALIZER_LOW_CUTOFF = 2;

const int AL_EQUALIZER_MID1_GAIN = 3;

const int AL_EQUALIZER_MID1_CENTER = 4;

const int AL_EQUALIZER_MID1_WIDTH = 5;

const int AL_EQUALIZER_MID2_GAIN = 6;

const int AL_EQUALIZER_MID2_CENTER = 7;

const int AL_EQUALIZER_MID2_WIDTH = 8;

const int AL_EQUALIZER_HIGH_GAIN = 9;

const int AL_EQUALIZER_HIGH_CUTOFF = 10;

const int AL_EFFECT_FIRST_PARAMETER = 0;

const int AL_EFFECT_LAST_PARAMETER = 32768;

const int AL_EFFECT_TYPE = 32769;

const int AL_EFFECT_NULL = 0;

const int AL_EFFECT_REVERB = 1;

const int AL_EFFECT_CHORUS = 2;

const int AL_EFFECT_DISTORTION = 3;

const int AL_EFFECT_ECHO = 4;

const int AL_EFFECT_FLANGER = 5;

const int AL_EFFECT_FREQUENCY_SHIFTER = 6;

const int AL_EFFECT_VOCAL_MORPHER = 7;

const int AL_EFFECT_PITCH_SHIFTER = 8;

const int AL_EFFECT_RING_MODULATOR = 9;

const int AL_EFFECT_AUTOWAH = 10;

const int AL_EFFECT_COMPRESSOR = 11;

const int AL_EFFECT_EQUALIZER = 12;

const int AL_EFFECT_EAXREVERB = 32768;

const int AL_EFFECTSLOT_EFFECT = 1;

const int AL_EFFECTSLOT_GAIN = 2;

const int AL_EFFECTSLOT_AUXILIARY_SEND_AUTO = 3;

const int AL_EFFECTSLOT_NULL = 0;

const int AL_LOWPASS_GAIN = 1;

const int AL_LOWPASS_GAINHF = 2;

const int AL_HIGHPASS_GAIN = 1;

const int AL_HIGHPASS_GAINLF = 2;

const int AL_BANDPASS_GAIN = 1;

const int AL_BANDPASS_GAINLF = 2;

const int AL_BANDPASS_GAINHF = 3;

const int AL_FILTER_FIRST_PARAMETER = 0;

const int AL_FILTER_LAST_PARAMETER = 32768;

const int AL_FILTER_TYPE = 32769;

const int AL_FILTER_NULL = 0;

const int AL_FILTER_LOWPASS = 1;

const int AL_FILTER_HIGHPASS = 2;

const int AL_FILTER_BANDPASS = 3;

const double AL_LOWPASS_MIN_GAIN = 0.0;

const double AL_LOWPASS_MAX_GAIN = 1.0;

const double AL_LOWPASS_DEFAULT_GAIN = 1.0;

const double AL_LOWPASS_MIN_GAINHF = 0.0;

const double AL_LOWPASS_MAX_GAINHF = 1.0;

const double AL_LOWPASS_DEFAULT_GAINHF = 1.0;

const double AL_HIGHPASS_MIN_GAIN = 0.0;

const double AL_HIGHPASS_MAX_GAIN = 1.0;

const double AL_HIGHPASS_DEFAULT_GAIN = 1.0;

const double AL_HIGHPASS_MIN_GAINLF = 0.0;

const double AL_HIGHPASS_MAX_GAINLF = 1.0;

const double AL_HIGHPASS_DEFAULT_GAINLF = 1.0;

const double AL_BANDPASS_MIN_GAIN = 0.0;

const double AL_BANDPASS_MAX_GAIN = 1.0;

const double AL_BANDPASS_DEFAULT_GAIN = 1.0;

const double AL_BANDPASS_MIN_GAINHF = 0.0;

const double AL_BANDPASS_MAX_GAINHF = 1.0;

const double AL_BANDPASS_DEFAULT_GAINHF = 1.0;

const double AL_BANDPASS_MIN_GAINLF = 0.0;

const double AL_BANDPASS_MAX_GAINLF = 1.0;

const double AL_BANDPASS_DEFAULT_GAINLF = 1.0;

const double AL_REVERB_MIN_DENSITY = 0.0;

const double AL_REVERB_MAX_DENSITY = 1.0;

const double AL_REVERB_DEFAULT_DENSITY = 1.0;

const double AL_REVERB_MIN_DIFFUSION = 0.0;

const double AL_REVERB_MAX_DIFFUSION = 1.0;

const double AL_REVERB_DEFAULT_DIFFUSION = 1.0;

const double AL_REVERB_MIN_GAIN = 0.0;

const double AL_REVERB_MAX_GAIN = 1.0;

const double AL_REVERB_DEFAULT_GAIN = 0.3199999928474426;

const double AL_REVERB_MIN_GAINHF = 0.0;

const double AL_REVERB_MAX_GAINHF = 1.0;

const double AL_REVERB_DEFAULT_GAINHF = 0.8899999856948853;

const double AL_REVERB_MIN_DECAY_TIME = 0.10000000149011612;

const double AL_REVERB_MAX_DECAY_TIME = 20.0;

const double AL_REVERB_DEFAULT_DECAY_TIME = 1.4900000095367432;

const double AL_REVERB_MIN_DECAY_HFRATIO = 0.10000000149011612;

const double AL_REVERB_MAX_DECAY_HFRATIO = 2.0;

const double AL_REVERB_DEFAULT_DECAY_HFRATIO = 0.8299999833106995;

const double AL_REVERB_MIN_REFLECTIONS_GAIN = 0.0;

const double AL_REVERB_MAX_REFLECTIONS_GAIN = 3.1600000858306885;

const double AL_REVERB_DEFAULT_REFLECTIONS_GAIN = 0.05000000074505806;

const double AL_REVERB_MIN_REFLECTIONS_DELAY = 0.0;

const double AL_REVERB_MAX_REFLECTIONS_DELAY = 0.30000001192092896;

const double AL_REVERB_DEFAULT_REFLECTIONS_DELAY = 0.007000000216066837;

const double AL_REVERB_MIN_LATE_REVERB_GAIN = 0.0;

const double AL_REVERB_MAX_LATE_REVERB_GAIN = 10.0;

const double AL_REVERB_DEFAULT_LATE_REVERB_GAIN = 1.2599999904632568;

const double AL_REVERB_MIN_LATE_REVERB_DELAY = 0.0;

const double AL_REVERB_MAX_LATE_REVERB_DELAY = 0.10000000149011612;

const double AL_REVERB_DEFAULT_LATE_REVERB_DELAY = 0.010999999940395355;

const double AL_REVERB_MIN_AIR_ABSORPTION_GAINHF = 0.8920000195503235;

const double AL_REVERB_MAX_AIR_ABSORPTION_GAINHF = 1.0;

const double AL_REVERB_DEFAULT_AIR_ABSORPTION_GAINHF = 0.9940000176429749;

const double AL_REVERB_MIN_ROOM_ROLLOFF_FACTOR = 0.0;

const double AL_REVERB_MAX_ROOM_ROLLOFF_FACTOR = 10.0;

const double AL_REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR = 0.0;

const int AL_REVERB_MIN_DECAY_HFLIMIT = 0;

const int AL_REVERB_MAX_DECAY_HFLIMIT = 1;

const int AL_REVERB_DEFAULT_DECAY_HFLIMIT = 1;

const double AL_EAXREVERB_MIN_DENSITY = 0.0;

const double AL_EAXREVERB_MAX_DENSITY = 1.0;

const double AL_EAXREVERB_DEFAULT_DENSITY = 1.0;

const double AL_EAXREVERB_MIN_DIFFUSION = 0.0;

const double AL_EAXREVERB_MAX_DIFFUSION = 1.0;

const double AL_EAXREVERB_DEFAULT_DIFFUSION = 1.0;

const double AL_EAXREVERB_MIN_GAIN = 0.0;

const double AL_EAXREVERB_MAX_GAIN = 1.0;

const double AL_EAXREVERB_DEFAULT_GAIN = 0.3199999928474426;

const double AL_EAXREVERB_MIN_GAINHF = 0.0;

const double AL_EAXREVERB_MAX_GAINHF = 1.0;

const double AL_EAXREVERB_DEFAULT_GAINHF = 0.8899999856948853;

const double AL_EAXREVERB_MIN_GAINLF = 0.0;

const double AL_EAXREVERB_MAX_GAINLF = 1.0;

const double AL_EAXREVERB_DEFAULT_GAINLF = 1.0;

const double AL_EAXREVERB_MIN_DECAY_TIME = 0.10000000149011612;

const double AL_EAXREVERB_MAX_DECAY_TIME = 20.0;

const double AL_EAXREVERB_DEFAULT_DECAY_TIME = 1.4900000095367432;

const double AL_EAXREVERB_MIN_DECAY_HFRATIO = 0.10000000149011612;

const double AL_EAXREVERB_MAX_DECAY_HFRATIO = 2.0;

const double AL_EAXREVERB_DEFAULT_DECAY_HFRATIO = 0.8299999833106995;

const double AL_EAXREVERB_MIN_DECAY_LFRATIO = 0.10000000149011612;

const double AL_EAXREVERB_MAX_DECAY_LFRATIO = 2.0;

const double AL_EAXREVERB_DEFAULT_DECAY_LFRATIO = 1.0;

const double AL_EAXREVERB_MIN_REFLECTIONS_GAIN = 0.0;

const double AL_EAXREVERB_MAX_REFLECTIONS_GAIN = 3.1600000858306885;

const double AL_EAXREVERB_DEFAULT_REFLECTIONS_GAIN = 0.05000000074505806;

const double AL_EAXREVERB_MIN_REFLECTIONS_DELAY = 0.0;

const double AL_EAXREVERB_MAX_REFLECTIONS_DELAY = 0.30000001192092896;

const double AL_EAXREVERB_DEFAULT_REFLECTIONS_DELAY = 0.007000000216066837;

const double AL_EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ = 0.0;

const double AL_EAXREVERB_MIN_LATE_REVERB_GAIN = 0.0;

const double AL_EAXREVERB_MAX_LATE_REVERB_GAIN = 10.0;

const double AL_EAXREVERB_DEFAULT_LATE_REVERB_GAIN = 1.2599999904632568;

const double AL_EAXREVERB_MIN_LATE_REVERB_DELAY = 0.0;

const double AL_EAXREVERB_MAX_LATE_REVERB_DELAY = 0.10000000149011612;

const double AL_EAXREVERB_DEFAULT_LATE_REVERB_DELAY = 0.010999999940395355;

const double AL_EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ = 0.0;

const double AL_EAXREVERB_MIN_ECHO_TIME = 0.07500000298023224;

const double AL_EAXREVERB_MAX_ECHO_TIME = 0.25;

const double AL_EAXREVERB_DEFAULT_ECHO_TIME = 0.25;

const double AL_EAXREVERB_MIN_ECHO_DEPTH = 0.0;

const double AL_EAXREVERB_MAX_ECHO_DEPTH = 1.0;

const double AL_EAXREVERB_DEFAULT_ECHO_DEPTH = 0.0;

const double AL_EAXREVERB_MIN_MODULATION_TIME = 0.03999999910593033;

const double AL_EAXREVERB_MAX_MODULATION_TIME = 4.0;

const double AL_EAXREVERB_DEFAULT_MODULATION_TIME = 0.25;

const double AL_EAXREVERB_MIN_MODULATION_DEPTH = 0.0;

const double AL_EAXREVERB_MAX_MODULATION_DEPTH = 1.0;

const double AL_EAXREVERB_DEFAULT_MODULATION_DEPTH = 0.0;

const double AL_EAXREVERB_MIN_AIR_ABSORPTION_GAINHF = 0.8920000195503235;

const double AL_EAXREVERB_MAX_AIR_ABSORPTION_GAINHF = 1.0;

const double AL_EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF = 0.9940000176429749;

const double AL_EAXREVERB_MIN_HFREFERENCE = 1000.0;

const double AL_EAXREVERB_MAX_HFREFERENCE = 20000.0;

const double AL_EAXREVERB_DEFAULT_HFREFERENCE = 5000.0;

const double AL_EAXREVERB_MIN_LFREFERENCE = 20.0;

const double AL_EAXREVERB_MAX_LFREFERENCE = 1000.0;

const double AL_EAXREVERB_DEFAULT_LFREFERENCE = 250.0;

const double AL_EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR = 0.0;

const double AL_EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR = 10.0;

const double AL_EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR = 0.0;

const int AL_EAXREVERB_MIN_DECAY_HFLIMIT = 0;

const int AL_EAXREVERB_MAX_DECAY_HFLIMIT = 1;

const int AL_EAXREVERB_DEFAULT_DECAY_HFLIMIT = 1;

const int AL_CHORUS_WAVEFORM_SINUSOID = 0;

const int AL_CHORUS_WAVEFORM_TRIANGLE = 1;

const int AL_CHORUS_MIN_WAVEFORM = 0;

const int AL_CHORUS_MAX_WAVEFORM = 1;

const int AL_CHORUS_DEFAULT_WAVEFORM = 1;

const int AL_CHORUS_MIN_PHASE = -180;

const int AL_CHORUS_MAX_PHASE = 180;

const int AL_CHORUS_DEFAULT_PHASE = 90;

const double AL_CHORUS_MIN_RATE = 0.0;

const double AL_CHORUS_MAX_RATE = 10.0;

const double AL_CHORUS_DEFAULT_RATE = 1.100000023841858;

const double AL_CHORUS_MIN_DEPTH = 0.0;

const double AL_CHORUS_MAX_DEPTH = 1.0;

const double AL_CHORUS_DEFAULT_DEPTH = 0.10000000149011612;

const double AL_CHORUS_MIN_FEEDBACK = -1.0;

const double AL_CHORUS_MAX_FEEDBACK = 1.0;

const double AL_CHORUS_DEFAULT_FEEDBACK = 0.25;

const double AL_CHORUS_MIN_DELAY = 0.0;

const double AL_CHORUS_MAX_DELAY = 0.01600000075995922;

const double AL_CHORUS_DEFAULT_DELAY = 0.01600000075995922;

const double AL_DISTORTION_MIN_EDGE = 0.0;

const double AL_DISTORTION_MAX_EDGE = 1.0;

const double AL_DISTORTION_DEFAULT_EDGE = 0.20000000298023224;

const double AL_DISTORTION_MIN_GAIN = 0.009999999776482582;

const double AL_DISTORTION_MAX_GAIN = 1.0;

const double AL_DISTORTION_DEFAULT_GAIN = 0.05000000074505806;

const double AL_DISTORTION_MIN_LOWPASS_CUTOFF = 80.0;

const double AL_DISTORTION_MAX_LOWPASS_CUTOFF = 24000.0;

const double AL_DISTORTION_DEFAULT_LOWPASS_CUTOFF = 8000.0;

const double AL_DISTORTION_MIN_EQCENTER = 80.0;

const double AL_DISTORTION_MAX_EQCENTER = 24000.0;

const double AL_DISTORTION_DEFAULT_EQCENTER = 3600.0;

const double AL_DISTORTION_MIN_EQBANDWIDTH = 80.0;

const double AL_DISTORTION_MAX_EQBANDWIDTH = 24000.0;

const double AL_DISTORTION_DEFAULT_EQBANDWIDTH = 3600.0;

const double AL_ECHO_MIN_DELAY = 0.0;

const double AL_ECHO_MAX_DELAY = 0.2070000022649765;

const double AL_ECHO_DEFAULT_DELAY = 0.10000000149011612;

const double AL_ECHO_MIN_LRDELAY = 0.0;

const double AL_ECHO_MAX_LRDELAY = 0.40400001406669617;

const double AL_ECHO_DEFAULT_LRDELAY = 0.10000000149011612;

const double AL_ECHO_MIN_DAMPING = 0.0;

const double AL_ECHO_MAX_DAMPING = 0.9900000095367432;

const double AL_ECHO_DEFAULT_DAMPING = 0.5;

const double AL_ECHO_MIN_FEEDBACK = 0.0;

const double AL_ECHO_MAX_FEEDBACK = 1.0;

const double AL_ECHO_DEFAULT_FEEDBACK = 0.5;

const double AL_ECHO_MIN_SPREAD = -1.0;

const double AL_ECHO_MAX_SPREAD = 1.0;

const double AL_ECHO_DEFAULT_SPREAD = -1.0;

const int AL_FLANGER_WAVEFORM_SINUSOID = 0;

const int AL_FLANGER_WAVEFORM_TRIANGLE = 1;

const int AL_FLANGER_MIN_WAVEFORM = 0;

const int AL_FLANGER_MAX_WAVEFORM = 1;

const int AL_FLANGER_DEFAULT_WAVEFORM = 1;

const int AL_FLANGER_MIN_PHASE = -180;

const int AL_FLANGER_MAX_PHASE = 180;

const int AL_FLANGER_DEFAULT_PHASE = 0;

const double AL_FLANGER_MIN_RATE = 0.0;

const double AL_FLANGER_MAX_RATE = 10.0;

const double AL_FLANGER_DEFAULT_RATE = 0.27000001072883606;

const double AL_FLANGER_MIN_DEPTH = 0.0;

const double AL_FLANGER_MAX_DEPTH = 1.0;

const double AL_FLANGER_DEFAULT_DEPTH = 1.0;

const double AL_FLANGER_MIN_FEEDBACK = -1.0;

const double AL_FLANGER_MAX_FEEDBACK = 1.0;

const double AL_FLANGER_DEFAULT_FEEDBACK = -0.5;

const double AL_FLANGER_MIN_DELAY = 0.0;

const double AL_FLANGER_MAX_DELAY = 0.004000000189989805;

const double AL_FLANGER_DEFAULT_DELAY = 0.0020000000949949026;

const double AL_FREQUENCY_SHIFTER_MIN_FREQUENCY = 0.0;

const double AL_FREQUENCY_SHIFTER_MAX_FREQUENCY = 24000.0;

const double AL_FREQUENCY_SHIFTER_DEFAULT_FREQUENCY = 0.0;

const int AL_FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION = 0;

const int AL_FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION = 2;

const int AL_FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION = 0;

const int AL_FREQUENCY_SHIFTER_DIRECTION_DOWN = 0;

const int AL_FREQUENCY_SHIFTER_DIRECTION_UP = 1;

const int AL_FREQUENCY_SHIFTER_DIRECTION_OFF = 2;

const int AL_FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION = 0;

const int AL_FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION = 2;

const int AL_FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION = 0;

const int AL_VOCAL_MORPHER_MIN_PHONEMEA = 0;

const int AL_VOCAL_MORPHER_MAX_PHONEMEA = 29;

const int AL_VOCAL_MORPHER_DEFAULT_PHONEMEA = 0;

const int AL_VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING = -24;

const int AL_VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING = 24;

const int AL_VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING = 0;

const int AL_VOCAL_MORPHER_MIN_PHONEMEB = 0;

const int AL_VOCAL_MORPHER_MAX_PHONEMEB = 29;

const int AL_VOCAL_MORPHER_DEFAULT_PHONEMEB = 10;

const int AL_VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING = -24;

const int AL_VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING = 24;

const int AL_VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING = 0;

const int AL_VOCAL_MORPHER_PHONEME_A = 0;

const int AL_VOCAL_MORPHER_PHONEME_E = 1;

const int AL_VOCAL_MORPHER_PHONEME_I = 2;

const int AL_VOCAL_MORPHER_PHONEME_O = 3;

const int AL_VOCAL_MORPHER_PHONEME_U = 4;

const int AL_VOCAL_MORPHER_PHONEME_AA = 5;

const int AL_VOCAL_MORPHER_PHONEME_AE = 6;

const int AL_VOCAL_MORPHER_PHONEME_AH = 7;

const int AL_VOCAL_MORPHER_PHONEME_AO = 8;

const int AL_VOCAL_MORPHER_PHONEME_EH = 9;

const int AL_VOCAL_MORPHER_PHONEME_ER = 10;

const int AL_VOCAL_MORPHER_PHONEME_IH = 11;

const int AL_VOCAL_MORPHER_PHONEME_IY = 12;

const int AL_VOCAL_MORPHER_PHONEME_UH = 13;

const int AL_VOCAL_MORPHER_PHONEME_UW = 14;

const int AL_VOCAL_MORPHER_PHONEME_B = 15;

const int AL_VOCAL_MORPHER_PHONEME_D = 16;

const int AL_VOCAL_MORPHER_PHONEME_F = 17;

const int AL_VOCAL_MORPHER_PHONEME_G = 18;

const int AL_VOCAL_MORPHER_PHONEME_J = 19;

const int AL_VOCAL_MORPHER_PHONEME_K = 20;

const int AL_VOCAL_MORPHER_PHONEME_L = 21;

const int AL_VOCAL_MORPHER_PHONEME_M = 22;

const int AL_VOCAL_MORPHER_PHONEME_N = 23;

const int AL_VOCAL_MORPHER_PHONEME_P = 24;

const int AL_VOCAL_MORPHER_PHONEME_R = 25;

const int AL_VOCAL_MORPHER_PHONEME_S = 26;

const int AL_VOCAL_MORPHER_PHONEME_T = 27;

const int AL_VOCAL_MORPHER_PHONEME_V = 28;

const int AL_VOCAL_MORPHER_PHONEME_Z = 29;

const int AL_VOCAL_MORPHER_WAVEFORM_SINUSOID = 0;

const int AL_VOCAL_MORPHER_WAVEFORM_TRIANGLE = 1;

const int AL_VOCAL_MORPHER_WAVEFORM_SAWTOOTH = 2;

const int AL_VOCAL_MORPHER_MIN_WAVEFORM = 0;

const int AL_VOCAL_MORPHER_MAX_WAVEFORM = 2;

const int AL_VOCAL_MORPHER_DEFAULT_WAVEFORM = 0;

const double AL_VOCAL_MORPHER_MIN_RATE = 0.0;

const double AL_VOCAL_MORPHER_MAX_RATE = 10.0;

const double AL_VOCAL_MORPHER_DEFAULT_RATE = 1.409999966621399;

const int AL_PITCH_SHIFTER_MIN_COARSE_TUNE = -12;

const int AL_PITCH_SHIFTER_MAX_COARSE_TUNE = 12;

const int AL_PITCH_SHIFTER_DEFAULT_COARSE_TUNE = 12;

const int AL_PITCH_SHIFTER_MIN_FINE_TUNE = -50;

const int AL_PITCH_SHIFTER_MAX_FINE_TUNE = 50;

const int AL_PITCH_SHIFTER_DEFAULT_FINE_TUNE = 0;

const double AL_RING_MODULATOR_MIN_FREQUENCY = 0.0;

const double AL_RING_MODULATOR_MAX_FREQUENCY = 8000.0;

const double AL_RING_MODULATOR_DEFAULT_FREQUENCY = 440.0;

const double AL_RING_MODULATOR_MIN_HIGHPASS_CUTOFF = 0.0;

const double AL_RING_MODULATOR_MAX_HIGHPASS_CUTOFF = 24000.0;

const double AL_RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF = 800.0;

const int AL_RING_MODULATOR_SINUSOID = 0;

const int AL_RING_MODULATOR_SAWTOOTH = 1;

const int AL_RING_MODULATOR_SQUARE = 2;

const int AL_RING_MODULATOR_MIN_WAVEFORM = 0;

const int AL_RING_MODULATOR_MAX_WAVEFORM = 2;

const int AL_RING_MODULATOR_DEFAULT_WAVEFORM = 0;

const double AL_AUTOWAH_MIN_ATTACK_TIME = 0.00009999999747378752;

const double AL_AUTOWAH_MAX_ATTACK_TIME = 1.0;

const double AL_AUTOWAH_DEFAULT_ATTACK_TIME = 0.05999999865889549;

const double AL_AUTOWAH_MIN_RELEASE_TIME = 0.00009999999747378752;

const double AL_AUTOWAH_MAX_RELEASE_TIME = 1.0;

const double AL_AUTOWAH_DEFAULT_RELEASE_TIME = 0.05999999865889549;

const double AL_AUTOWAH_MIN_RESONANCE = 2.0;

const double AL_AUTOWAH_MAX_RESONANCE = 1000.0;

const double AL_AUTOWAH_DEFAULT_RESONANCE = 1000.0;

const double AL_AUTOWAH_MIN_PEAK_GAIN = 0.000029999999242136255;

const double AL_AUTOWAH_MAX_PEAK_GAIN = 31621.0;

const double AL_AUTOWAH_DEFAULT_PEAK_GAIN = 11.220000267028809;

const int AL_COMPRESSOR_MIN_ONOFF = 0;

const int AL_COMPRESSOR_MAX_ONOFF = 1;

const int AL_COMPRESSOR_DEFAULT_ONOFF = 1;

const double AL_EQUALIZER_MIN_LOW_GAIN = 0.12600000202655792;

const double AL_EQUALIZER_MAX_LOW_GAIN = 7.942999839782715;

const double AL_EQUALIZER_DEFAULT_LOW_GAIN = 1.0;

const double AL_EQUALIZER_MIN_LOW_CUTOFF = 50.0;

const double AL_EQUALIZER_MAX_LOW_CUTOFF = 800.0;

const double AL_EQUALIZER_DEFAULT_LOW_CUTOFF = 200.0;

const double AL_EQUALIZER_MIN_MID1_GAIN = 0.12600000202655792;

const double AL_EQUALIZER_MAX_MID1_GAIN = 7.942999839782715;

const double AL_EQUALIZER_DEFAULT_MID1_GAIN = 1.0;

const double AL_EQUALIZER_MIN_MID1_CENTER = 200.0;

const double AL_EQUALIZER_MAX_MID1_CENTER = 3000.0;

const double AL_EQUALIZER_DEFAULT_MID1_CENTER = 500.0;

const double AL_EQUALIZER_MIN_MID1_WIDTH = 0.009999999776482582;

const double AL_EQUALIZER_MAX_MID1_WIDTH = 1.0;

const double AL_EQUALIZER_DEFAULT_MID1_WIDTH = 1.0;

const double AL_EQUALIZER_MIN_MID2_GAIN = 0.12600000202655792;

const double AL_EQUALIZER_MAX_MID2_GAIN = 7.942999839782715;

const double AL_EQUALIZER_DEFAULT_MID2_GAIN = 1.0;

const double AL_EQUALIZER_MIN_MID2_CENTER = 1000.0;

const double AL_EQUALIZER_MAX_MID2_CENTER = 8000.0;

const double AL_EQUALIZER_DEFAULT_MID2_CENTER = 3000.0;

const double AL_EQUALIZER_MIN_MID2_WIDTH = 0.009999999776482582;

const double AL_EQUALIZER_MAX_MID2_WIDTH = 1.0;

const double AL_EQUALIZER_DEFAULT_MID2_WIDTH = 1.0;

const double AL_EQUALIZER_MIN_HIGH_GAIN = 0.12600000202655792;

const double AL_EQUALIZER_MAX_HIGH_GAIN = 7.942999839782715;

const double AL_EQUALIZER_DEFAULT_HIGH_GAIN = 1.0;

const double AL_EQUALIZER_MIN_HIGH_CUTOFF = 4000.0;

const double AL_EQUALIZER_MAX_HIGH_CUTOFF = 16000.0;

const double AL_EQUALIZER_DEFAULT_HIGH_CUTOFF = 6000.0;

const double AL_MIN_AIR_ABSORPTION_FACTOR = 0.0;

const double AL_MAX_AIR_ABSORPTION_FACTOR = 10.0;

const double AL_DEFAULT_AIR_ABSORPTION_FACTOR = 0.0;

const double AL_MIN_ROOM_ROLLOFF_FACTOR = 0.0;

const double AL_MAX_ROOM_ROLLOFF_FACTOR = 10.0;

const double AL_DEFAULT_ROOM_ROLLOFF_FACTOR = 0.0;

const double AL_MIN_CONE_OUTER_GAINHF = 0.0;

const double AL_MAX_CONE_OUTER_GAINHF = 1.0;

const double AL_DEFAULT_CONE_OUTER_GAINHF = 1.0;

const int AL_MIN_DIRECT_FILTER_GAINHF_AUTO = 0;

const int AL_MAX_DIRECT_FILTER_GAINHF_AUTO = 1;

const int AL_DEFAULT_DIRECT_FILTER_GAINHF_AUTO = 1;

const int AL_MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO = 0;

const int AL_MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO = 1;

const int AL_DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO = 1;

const int AL_MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 0;

const int AL_MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 1;

const int AL_DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 1;

const double AL_MIN_METERS_PER_UNIT = 1.1754943508222875e-38;

const double AL_MAX_METERS_PER_UNIT = 3.4028234663852886e+38;

const double AL_DEFAULT_METERS_PER_UNIT = 1.0;

const int ALC_EXT_disconnect = 1;

const int ALC_CONNECTED = 787;

const int ALC_EXT_thread_local_context = 1;

const int AL_EXT_source_distance_model = 1;

const int AL_SOURCE_DISTANCE_MODEL = 512;

const int AL_SOFT_buffer_sub_data = 1;

const int AL_BYTE_RW_OFFSETS_SOFT = 4145;

const int AL_SAMPLE_RW_OFFSETS_SOFT = 4146;

const int AL_SOFT_loop_points = 1;

const int AL_LOOP_POINTS_SOFT = 8213;

const int AL_EXT_FOLDBACK = 1;

const String AL_EXT_FOLDBACK_NAME = 'AL_EXT_FOLDBACK';

const int AL_FOLDBACK_EVENT_BLOCK = 16658;

const int AL_FOLDBACK_EVENT_START = 16657;

const int AL_FOLDBACK_EVENT_STOP = 16659;

const int AL_FOLDBACK_MODE_MONO = 16641;

const int AL_FOLDBACK_MODE_STEREO = 16642;

const int ALC_EXT_DEDICATED = 1;

const int AL_DEDICATED_GAIN = 1;

const int AL_EFFECT_DEDICATED_DIALOGUE = 36865;

const int AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT = 36864;

const int AL_SOFT_buffer_samples = 1;

const int AL_MONO_SOFT = 5376;

const int AL_STEREO_SOFT = 5377;

const int AL_REAR_SOFT = 5378;

const int AL_QUAD_SOFT = 5379;

const int AL_5POINT1_SOFT = 5380;

const int AL_6POINT1_SOFT = 5381;

const int AL_7POINT1_SOFT = 5382;

const int AL_BYTE_SOFT = 5120;

const int AL_UNSIGNED_BYTE_SOFT = 5121;

const int AL_SHORT_SOFT = 5122;

const int AL_UNSIGNED_SHORT_SOFT = 5123;

const int AL_INT_SOFT = 5124;

const int AL_UNSIGNED_INT_SOFT = 5125;

const int AL_FLOAT_SOFT = 5126;

const int AL_DOUBLE_SOFT = 5127;

const int AL_BYTE3_SOFT = 5128;

const int AL_UNSIGNED_BYTE3_SOFT = 5129;

const int AL_MONO8_SOFT = 4352;

const int AL_MONO16_SOFT = 4353;

const int AL_MONO32F_SOFT = 65552;

const int AL_STEREO8_SOFT = 4354;

const int AL_STEREO16_SOFT = 4355;

const int AL_STEREO32F_SOFT = 65553;

const int AL_QUAD8_SOFT = 4612;

const int AL_QUAD16_SOFT = 4613;

const int AL_QUAD32F_SOFT = 4614;

const int AL_REAR8_SOFT = 4615;

const int AL_REAR16_SOFT = 4616;

const int AL_REAR32F_SOFT = 4617;

const int AL_5POINT1_8_SOFT = 4618;

const int AL_5POINT1_16_SOFT = 4619;

const int AL_5POINT1_32F_SOFT = 4620;

const int AL_6POINT1_8_SOFT = 4621;

const int AL_6POINT1_16_SOFT = 4622;

const int AL_6POINT1_32F_SOFT = 4623;

const int AL_7POINT1_8_SOFT = 4624;

const int AL_7POINT1_16_SOFT = 4625;

const int AL_7POINT1_32F_SOFT = 4626;

const int AL_INTERNAL_FORMAT_SOFT = 8200;

const int AL_BYTE_LENGTH_SOFT = 8201;

const int AL_SAMPLE_LENGTH_SOFT = 8202;

const int AL_SEC_LENGTH_SOFT = 8203;

const int AL_SOFT_direct_channels = 1;

const int AL_DIRECT_CHANNELS_SOFT = 4147;

const int ALC_SOFT_loopback = 1;

const int ALC_FORMAT_CHANNELS_SOFT = 6544;

const int ALC_FORMAT_TYPE_SOFT = 6545;

const int ALC_BYTE_SOFT = 5120;

const int ALC_UNSIGNED_BYTE_SOFT = 5121;

const int ALC_SHORT_SOFT = 5122;

const int ALC_UNSIGNED_SHORT_SOFT = 5123;

const int ALC_INT_SOFT = 5124;

const int ALC_UNSIGNED_INT_SOFT = 5125;

const int ALC_FLOAT_SOFT = 5126;

const int ALC_MONO_SOFT = 5376;

const int ALC_STEREO_SOFT = 5377;

const int ALC_QUAD_SOFT = 5379;

const int ALC_5POINT1_SOFT = 5380;

const int ALC_6POINT1_SOFT = 5381;

const int ALC_7POINT1_SOFT = 5382;

const int AL_EXT_STEREO_ANGLES = 1;

const int AL_STEREO_ANGLES = 4144;

const int AL_EXT_SOURCE_RADIUS = 1;

const int AL_SOURCE_RADIUS = 4145;

const int AL_SOFT_source_latency = 1;

const int AL_SAMPLE_OFFSET_LATENCY_SOFT = 4608;

const int AL_SEC_OFFSET_LATENCY_SOFT = 4609;

const int ALC_EXT_DEFAULT_FILTER_ORDER = 1;

const int ALC_DEFAULT_FILTER_ORDER = 4352;

const int AL_SOFT_deferred_updates = 1;

const int AL_DEFERRED_UPDATES_SOFT = 49154;

const int AL_SOFT_block_alignment = 1;

const int AL_UNPACK_BLOCK_ALIGNMENT_SOFT = 8204;

const int AL_PACK_BLOCK_ALIGNMENT_SOFT = 8205;

const int AL_SOFT_MSADPCM = 1;

const int AL_FORMAT_MONO_MSADPCM_SOFT = 4866;

const int AL_FORMAT_STEREO_MSADPCM_SOFT = 4867;

const int AL_SOFT_source_length = 1;

const int AL_SOFT_buffer_length_query = 1;

const int ALC_SOFT_pause_device = 1;

const int AL_EXT_BFORMAT = 1;

const int AL_FORMAT_BFORMAT2D_8 = 131105;

const int AL_FORMAT_BFORMAT2D_16 = 131106;

const int AL_FORMAT_BFORMAT2D_FLOAT32 = 131107;

const int AL_FORMAT_BFORMAT3D_8 = 131121;

const int AL_FORMAT_BFORMAT3D_16 = 131122;

const int AL_FORMAT_BFORMAT3D_FLOAT32 = 131123;

const int AL_EXT_MULAW_BFORMAT = 1;

const int AL_FORMAT_BFORMAT2D_MULAW = 65585;

const int AL_FORMAT_BFORMAT3D_MULAW = 65586;

const int ALC_SOFT_HRTF = 1;

const int ALC_HRTF_SOFT = 6546;

const int ALC_DONT_CARE_SOFT = 2;

const int ALC_HRTF_STATUS_SOFT = 6547;

const int ALC_HRTF_DISABLED_SOFT = 0;

const int ALC_HRTF_ENABLED_SOFT = 1;

const int ALC_HRTF_DENIED_SOFT = 2;

const int ALC_HRTF_REQUIRED_SOFT = 3;

const int ALC_HRTF_HEADPHONES_DETECTED_SOFT = 4;

const int ALC_HRTF_UNSUPPORTED_FORMAT_SOFT = 5;

const int ALC_NUM_HRTF_SPECIFIERS_SOFT = 6548;

const int ALC_HRTF_SPECIFIER_SOFT = 6549;

const int ALC_HRTF_ID_SOFT = 6550;

const int AL_SOFT_gain_clamp_ex = 1;

const int AL_GAIN_LIMIT_SOFT = 8206;

const int AL_NUM_RESAMPLERS_SOFT = 4624;

const int AL_DEFAULT_RESAMPLER_SOFT = 4625;

const int AL_SOURCE_RESAMPLER_SOFT = 4626;

const int AL_RESAMPLER_NAME_SOFT = 4627;

const int AL_SOURCE_SPATIALIZE_SOFT = 4628;

const int AL_AUTO_SOFT = 2;

const int ALC_OUTPUT_LIMITER_SOFT = 6554;

const int ALC_SOFT_device_clock = 1;

const int ALC_DEVICE_CLOCK_SOFT = 5632;

const int ALC_DEVICE_LATENCY_SOFT = 5633;

const int ALC_DEVICE_CLOCK_LATENCY_SOFT = 5634;

const int AL_SAMPLE_OFFSET_CLOCK_SOFT = 4610;

const int AL_SEC_OFFSET_CLOCK_SOFT = 4611;

const int AL_SOFT_direct_channels_remix = 1;

const int AL_DROP_UNMATCHED_SOFT = 1;

const int AL_REMIX_UNMATCHED_SOFT = 2;

const int AL_SOFT_bformat_ex = 1;

const int AL_AMBISONIC_LAYOUT_SOFT = 6551;

const int AL_AMBISONIC_SCALING_SOFT = 6552;

const int AL_FUMA_SOFT = 0;

const int AL_ACN_SOFT = 1;

const int AL_SN3D_SOFT = 1;

const int AL_N3D_SOFT = 2;

const int ALC_SOFT_loopback_bformat = 1;

const int ALC_AMBISONIC_LAYOUT_SOFT = 6551;

const int ALC_AMBISONIC_SCALING_SOFT = 6552;

const int ALC_AMBISONIC_ORDER_SOFT = 6553;

const int ALC_MAX_AMBISONIC_ORDER_SOFT = 6555;

const int ALC_BFORMAT3D_SOFT = 5383;

const int ALC_FUMA_SOFT = 0;

const int ALC_ACN_SOFT = 1;

const int ALC_SN3D_SOFT = 1;

const int ALC_N3D_SOFT = 2;

const int AL_EFFECTSLOT_TARGET_SOFT = 6556;

const int AL_SOFT_events = 1;

const int AL_EVENT_CALLBACK_FUNCTION_SOFT = 6562;

const int AL_EVENT_CALLBACK_USER_PARAM_SOFT = 6563;

const int AL_EVENT_TYPE_BUFFER_COMPLETED_SOFT = 6564;

const int AL_EVENT_TYPE_SOURCE_STATE_CHANGED_SOFT = 6565;

const int AL_EVENT_TYPE_DISCONNECTED_SOFT = 6566;

const int AL_BUFFER_CALLBACK_FUNCTION_SOFT = 6560;

const int AL_BUFFER_CALLBACK_USER_PARAM_SOFT = 6561;

const int AL_FORMAT_UHJ2CHN8_SOFT = 6562;

const int AL_FORMAT_UHJ2CHN16_SOFT = 6563;

const int AL_FORMAT_UHJ2CHN_FLOAT32_SOFT = 6564;

const int AL_FORMAT_UHJ3CHN8_SOFT = 6565;

const int AL_FORMAT_UHJ3CHN16_SOFT = 6566;

const int AL_FORMAT_UHJ3CHN_FLOAT32_SOFT = 6567;

const int AL_FORMAT_UHJ4CHN8_SOFT = 6568;

const int AL_FORMAT_UHJ4CHN16_SOFT = 6569;

const int AL_FORMAT_UHJ4CHN_FLOAT32_SOFT = 6570;

const int AL_STEREO_MODE_SOFT = 6576;

const int AL_NORMAL_SOFT = 0;

const int AL_SUPER_STEREO_SOFT = 1;

const int AL_SUPER_STEREO_WIDTH_SOFT = 6577;

const int AL_FORMAT_UHJ2CHN_MULAW_SOFT = 6579;

const int AL_FORMAT_UHJ2CHN_ALAW_SOFT = 6580;

const int AL_FORMAT_UHJ2CHN_IMA4_SOFT = 6581;

const int AL_FORMAT_UHJ2CHN_MSADPCM_SOFT = 6582;

const int AL_FORMAT_UHJ3CHN_MULAW_SOFT = 6583;

const int AL_FORMAT_UHJ3CHN_ALAW_SOFT = 6584;

const int AL_FORMAT_UHJ4CHN_MULAW_SOFT = 6585;

const int AL_FORMAT_UHJ4CHN_ALAW_SOFT = 6586;

const int ALC_OUTPUT_MODE_SOFT = 6572;

const int ALC_ANY_SOFT = 6573;

const int ALC_STEREO_BASIC_SOFT = 6574;

const int ALC_STEREO_UHJ_SOFT = 6575;

const int ALC_STEREO_HRTF_SOFT = 6578;

const int ALC_SURROUND_5_1_SOFT = 5380;

const int ALC_SURROUND_6_1_SOFT = 5381;

const int ALC_SURROUND_7_1_SOFT = 5382;

const int ALC_CONTEXT_FLAGS_EXT = 6607;

const int ALC_CONTEXT_DEBUG_BIT_EXT = 1;

const int AL_DONT_CARE_EXT = 2;

const int AL_DEBUG_OUTPUT_EXT = 6578;

const int AL_DEBUG_CALLBACK_FUNCTION_EXT = 6579;

const int AL_DEBUG_CALLBACK_USER_PARAM_EXT = 6580;

const int AL_DEBUG_SOURCE_API_EXT = 6581;

const int AL_DEBUG_SOURCE_AUDIO_SYSTEM_EXT = 6582;

const int AL_DEBUG_SOURCE_THIRD_PARTY_EXT = 6583;

const int AL_DEBUG_SOURCE_APPLICATION_EXT = 6584;

const int AL_DEBUG_SOURCE_OTHER_EXT = 6585;

const int AL_DEBUG_TYPE_ERROR_EXT = 6586;

const int AL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_EXT = 6587;

const int AL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_EXT = 6588;

const int AL_DEBUG_TYPE_PORTABILITY_EXT = 6589;

const int AL_DEBUG_TYPE_PERFORMANCE_EXT = 6590;

const int AL_DEBUG_TYPE_MARKER_EXT = 6591;

const int AL_DEBUG_TYPE_PUSH_GROUP_EXT = 6592;

const int AL_DEBUG_TYPE_POP_GROUP_EXT = 6593;

const int AL_DEBUG_TYPE_OTHER_EXT = 6594;

const int AL_DEBUG_SEVERITY_HIGH_EXT = 6595;

const int AL_DEBUG_SEVERITY_MEDIUM_EXT = 6596;

const int AL_DEBUG_SEVERITY_LOW_EXT = 6597;

const int AL_DEBUG_SEVERITY_NOTIFICATION_EXT = 6598;

const int AL_DEBUG_LOGGED_MESSAGES_EXT = 6599;

const int AL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_EXT = 6600;

const int AL_MAX_DEBUG_MESSAGE_LENGTH_EXT = 6601;

const int AL_MAX_DEBUG_LOGGED_MESSAGES_EXT = 6602;

const int AL_MAX_DEBUG_GROUP_STACK_DEPTH_EXT = 6603;

const int AL_MAX_LABEL_LENGTH_EXT = 6604;

const int AL_STACK_OVERFLOW_EXT = 6605;

const int AL_STACK_UNDERFLOW_EXT = 6606;

const int AL_CONTEXT_FLAGS_EXT = 6607;

const int AL_BUFFER_EXT = 4105;

const int AL_SOURCE_EXT = 6608;

const int AL_FILTER_EXT = 6609;

const int AL_EFFECT_EXT = 6610;

const int AL_AUXILIARY_EFFECT_SLOT_EXT = 6611;

const int ALC_PLAYBACK_DEVICE_SOFT = 6612;

const int ALC_CAPTURE_DEVICE_SOFT = 6613;

const int ALC_EVENT_TYPE_DEFAULT_DEVICE_CHANGED_SOFT = 6614;

const int ALC_EVENT_TYPE_DEVICE_ADDED_SOFT = 6615;

const int ALC_EVENT_TYPE_DEVICE_REMOVED_SOFT = 6616;
